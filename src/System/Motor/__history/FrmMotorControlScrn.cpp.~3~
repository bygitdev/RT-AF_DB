//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "FrmMotorControlScrn.h"
#include "AxisConfigFormScrn.h"
#include "AxisSelectFormScrn.h"
#include "faxisselect.h"
#include "MainFormScrn.h"
#include "FrmSensorPartScrn.h"
#include "AxisConfigFormScrn.h"
#include "CommonDataSetting.h"
#include "FormSecsGemSetScrn.h"
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
#include "BaseComm.h"
#include "Include.h"

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "CurvyControls"
#pragma resource "*.dfm"
TFrmMotorControl *FrmMotorControl;

#define UNLOCKED_  	0
#define LOCKED_  	1

//---------------------------------------------------------------------------
__fastcall TFrmMotorControl::TFrmMotorControl(TComponent* Owner)
	: TForm(Owner)
{
	#define   _MOTOR_IDNEX_COUNT_                           50

	#define   _MOTOR_POSITIVE_DIRECTION_                    1
	#define   _MOTOR_NEGATIVE_DIRECTION_                    0

	#define   _JOGMODE_VALUE_ENABLE_                        1
	#define   _JOGMODE_VALUE_DISABLE_                       0
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::Motorscreen_Initialize(int nAxisSelect)
{
	MtrPosGrid->Cells[0][0] = "ID";
    MtrPosGrid->Cells[1][0] = "INDEX NAME";
	MtrPosGrid->Cells[2][0] = "SET POS";
    MtrPosGrid->Cells[3][0] = "SET SPEED";
    MtrPosGrid->Cells[4][0] = "SET ACC";
    MtrPosGrid->Cells[5][0] = "ACT POS";
	MtrPosGrid->Cells[6][0] = "ACT SPEED";
	MtrPosGrid->Cells[7][0] = "ACT ACC";

	BtnCmnUnLock->Glyph = ImageLock->Picture->Bitmap;
	BtnCmnUnLock->Tag = LOCKED_;

	this->MtrPosGrid->RowCount = _MOTOR_IDNEX_COUNT_ + 1;

	for( int i = 0; i < this->MtrPosGrid->RowCount; i++ )
	{
		this->MtrPosGrid->Cells[ 0 ][ i + 1 ] = IntToStr( i );
	}

	this->MtrAxis_SelectedProcess(nAxisSelect);

	this->MtrRefreshTimer->Enabled = true;
	this->BtnInputMotionData->Enabled = true;
	this->BtnSaveMotionData->Enabled = false;

	this->EditJogSpeed->Text= IntToStr( nReadCommunicationDM( jogSpeed ) );
    _nSelectIndex = 0;

    pSensorFrm[0] = new TFrmSensorPart(PanelSensorPart1);
    pSensorFrm[0]->Parent = PanelSensorPart1;
    pSensorFrm[0]->Align = alClient;
    pSensorFrm[0]->Visible=true;
	((TFrmSensorPart*)pSensorFrm[0])->SensorScreenInitialize(0);

	pSensorFrm[1] = new TFrmSensorPart(PanelSensorPart2);
    pSensorFrm[1]->Parent = PanelSensorPart2;
    pSensorFrm[1]->Align = alClient;
	pSensorFrm[1]->Visible=true;
    ((TFrmSensorPart*)pSensorFrm[1])->SensorScreenInitialize(4);

    JogControlEdit->Text = "R - MOVE";
	_nJogControl = MTCMD_R_MOVE;
}
//---------------------------------------------------------------------------
void TFrmMotorControl::MtrAxis_SelectedProcess( int nSelectAxis )
{
	_nAxis_no =  nSelectAxis;

	if(FileExists(ExtractFilePath(Application->ExeName)+ "\\Ini\\MotorName.ini"))
	{
		String strBitmapUnique	= ExtractFilePath(Application->ExeName)+ "resource\\unique.bmp";

        TIniFile *ini = new TIniFile(ExtractFilePath(Application->ExeName)+ "\\Ini\\MotorName.ini");

		String StrRet = ini->ReadString("AXISNAME","AXIS"+IntToStr(_nAxis_no),"AXISNAME"+IntToStr(_nAxis_no));
		BtnAxisSelect->Caption = IntToStr(_nAxis_no+1)+ " : " + StrRet;


		String StrCaption = ini->ReadString("AXISSET","JOGNAME"+IntToStr(nSelectAxis),"X");

		String strTemp = ini->ReadString("AXISSET","DIRECT"+IntToStr(nSelectAxis),"1");

		_nRightDirect = _MOTOR_NEGATIVE_DIRECTION_;
		_nLeftDirect  = _MOTOR_POSITIVE_DIRECTION_;

		StrJogCheckCaption = "R MOVE";

        BtnJogPositive->Caption = StrJogCheckCaption + "- " + StrCaption + " MOVE";
		BtnJogNegative->Caption = StrJogCheckCaption + "+ " + StrCaption + " MOVE";

		if(strTemp == "1")
		{
			_nLeftDirect = _MOTOR_NEGATIVE_DIRECTION_;
            _nRightDirect = _MOTOR_POSITIVE_DIRECTION_;

			BtnJogPositive->Caption = StrJogCheckCaption + "+ " + StrCaption + " MOVE";
			BtnJogNegative->Caption = StrJogCheckCaption + "- " + StrCaption + " MOVE";

		}

        StrJogCaptionLeft = BtnJogNegative->Caption ;
		StrJogCaptionRight =  BtnJogPositive->Caption ;

        try
		{
			BtnAxisSelect->Glyph->LoadFromFile(strBitmapUnique);
		}
        catch(Exception& e)
		{
			// 파일이 없어서 예외 발생함 try catch 추가
		}
		BtnAxisSelect->Refresh();
		delete ini;

    }

	this->MtrData_ReadDB();
	this->MtrData_ReadSEQ();

	PanelMtrSelectIndex->Caption = "SELECT:";
	_nSelectIndex = -1;
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
bool    TFrmMotorControl::MtrData_ReadDB()
{
	int nGrpNo, nRcpNo;

	nGrpNo = nReadGroupNo();
	nRcpNo = nReadRecipeNo();

    String strCmnPath = ExtractFilePath(Application->ExeName)+ "\\Ini\\system\\GRP0\\RCP0\\Motor"+ IntToStr(_nAxis_no)+".ini";
	String StrPath = ExtractFilePath(Application->ExeName)+ "\\Ini\\system\\GRP"+IntToStr(nGrpNo)+"\\RCP"+IntToStr(nRcpNo)+"\\Motor"+ IntToStr(_nAxis_no)+".ini";
	String StrNamePath = ExtractFilePath(Application->ExeName)+ "\\Ini\\MotorIndexName.ini";

    TIniFile *cmnIni = new TIniFile(strCmnPath);
	TIniFile *ini = new TIniFile(StrPath);
	TIniFile *iniName = new TIniFile(StrNamePath);
    if(NULL == ini || NULL == iniName) return false;

	for( int nRow = 0; nRow <= MtrPosGrid->RowCount - 1; nRow++ )
	{
    	MtrPosGrid->Cells[1][nRow+1] = iniName->ReadString("INDEXNAME"+IntToStr(_nAxis_no),"INDEXNAME"+IntToStr(nRow),"");

		_flagCmn[nRow] = iniName->ReadBool("INDEXNAME"+IntToStr(_nAxis_no),"COMMON"+IntToStr(nRow),true);

        if(_flagCmn[nRow])
        {
            MtrPosGrid->Cells[2][nRow+1] = FloatToStr(cmnIni->ReadFloat("INDEXPOS","POSITION"+IntToStr(nRow),0));
			MtrPosGrid->Cells[3][nRow+1] = FloatToStr(cmnIni->ReadFloat("INDEXSPD","SPEED"+IntToStr(nRow),0));
            MtrPosGrid->Cells[4][nRow+1] = FloatToStr(cmnIni->ReadFloat("INDEXACC","ACC"+IntToStr(nRow),0));
		}
		else
        {
			MtrPosGrid->Cells[2][nRow+1] = FloatToStr(ini->ReadFloat("INDEXPOS","POSITION"+IntToStr(nRow),0));
			MtrPosGrid->Cells[3][nRow+1] = FloatToStr(ini->ReadFloat("INDEXSPD","SPEED"+IntToStr(nRow),0));
			MtrPosGrid->Cells[4][nRow+1] = FloatToStr(ini->ReadFloat("INDEXACC","ACC"+IntToStr(nRow),0));
		}
	}
	delete cmnIni;
	delete iniName;
	delete ini;

	MtrPosGrid->Repaint();

	return true;
}
//------------------------------------------------------------------------
bool    TFrmMotorControl::MtrData_ReadSEQ()
{
	g_MMIComm->m_mmiToSeq.nCmd = CMD_RD_MT_TABLE;
	g_MMIComm->m_mmiToSeq.buffer.motTable.nMtNo = _nAxis_no;

	if ( g_MMIComm->Send() &&  g_MMIComm->Recv() )
	{
		for( int nRow = 0; nRow <= MtrPosGrid->RowCount; nRow++ )
		{
			MtrPosGrid->Cells[5][nRow+1] =  FloatToStr(g_MMIComm->m_mmiToSeq.buffer.motTable.dPos[nRow]/1000);
			MtrPosGrid->Cells[6][nRow+1] =  FloatToStr(g_MMIComm->m_mmiToSeq.buffer.motTable.dVel[nRow]/1000);
			MtrPosGrid->Cells[7][nRow+1] =  FloatToStr(g_MMIComm->m_mmiToSeq.buffer.motTable.dAcc[nRow]/1000);
		}

		MtrPosGrid->Repaint();

		return true;
	}
	else
    {
        return false;
    }
}
//------------------------------------------------------------------------

bool    TFrmMotorControl::MtrData_SaveDB()
{
	int nGrpNo, nRcpNo;
	nGrpNo = nReadGroupNo();
	nRcpNo = nReadRecipeNo();

	String strCmnPath = ExtractFilePath(Application->ExeName)+ "\\Ini\\system\\GRP0\\RCP0\\Motor"+ IntToStr(_nAxis_no)+".ini";
	String StrPath = ExtractFilePath(Application->ExeName)+ "\\Ini\\system\\GRP"+IntToStr(nGrpNo)+"\\RCP"+IntToStr(nRcpNo)+"\\Motor"+ IntToStr(_nAxis_no)+".ini";
	String StrNamePath = ExtractFilePath(Application->ExeName)+ "\\Ini\\MotorIndexName.ini";

	TIniFile *cmnIni = new TIniFile(strCmnPath);
	TIniFile *ini = new TIniFile(StrPath);
	TIniFile *iniName = new TIniFile(StrNamePath);
	if(NULL == ini || NULL == iniName) return false;

    float MaxValue = ini->ReadFloat("INDEXPOS","POSITION"+IntToStr(_nSelectIndex),0) + dReadCommunicationDM(commonMotorDataLimit);
	float MinValue = ini->ReadFloat("INDEXPOS","POSITION"+IntToStr(_nSelectIndex),0) - dReadCommunicationDM(commonMotorDataLimit);
	float SelectValue = StrToFloat(MtrPosGrid->Cells[2][_nSelectIndex+1]);

	frmMain->MachineHistoryData("Motor Data Max Value : " + FloatToStr(MaxValue));
	frmMain->MachineHistoryData("Motor Data Min Value : " + FloatToStr(MinValue));
	frmMain->MachineHistoryData("Motor Data Update Value : " +FloatToStr(SelectValue));

	if( MinValue > SelectValue || MaxValue < SelectValue )
	{
		FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle("MOTOR DATA SAVE FAIL!");
		FrmCdBox->setText("모터 데이터 수정을 실패하였습니다. 지정된 DEFAULT 값 이내에 데이터를 기입하시오.");

		FrmMoter->RefreshMotors();

		return false;
	}

	for( int nRow = 0; nRow <= MtrPosGrid->RowCount - 1; nRow++ )
	{
		if(_flagCmn[nRow] && BtnCmnUnLock->Tag == LOCKED_) continue;

		iniName->WriteString("INDEXNAME"+IntToStr(_nAxis_no),"INDEXNAME"+IntToStr(nRow),MtrPosGrid->Cells[1][nRow+1]);
		ini->WriteString("INDEXPOS","POSITION"+IntToStr(nRow),MtrPosGrid->Cells[2][nRow+1]);
		ini->WriteString("INDEXSPD","SPEED"+IntToStr(nRow),MtrPosGrid->Cells[3][nRow+1]);
		ini->WriteString("INDEXACC","ACC"+IntToStr(nRow),MtrPosGrid->Cells[4][nRow+1]);

		if(_flagCmn[nRow])
		{
			cmnIni->WriteString("INDEXPOS","POSITION"+IntToStr(nRow),MtrPosGrid->Cells[2][nRow+1]);
			cmnIni->WriteString("INDEXSPD","SPEED"+IntToStr(nRow),MtrPosGrid->Cells[3][nRow+1]);
			cmnIni->WriteString("INDEXACC","ACC"+IntToStr(nRow),MtrPosGrid->Cells[4][nRow+1]);
		}
		if(nRow < 50)
		{
			//Log
			if(_wtof(MtrPosGrid->Cells[2][nRow+1].w_str()) != _wtof(MtrPosGrid->Cells[5][nRow+1].w_str()))
				MainForm->MachineHistoryData(String().sprintf(L"[MTR] MOTOR_WRITE AXIS[ %d ]INDEX[ %d ]POS[ %s -> %s ]TYPE[ %d ]",_nAxis_no,nRow,MtrPosGrid->Cells[5][nRow+1],MtrPosGrid->Cells[2][nRow+1],_flagCmn[nRow]));

			if(_wtof(MtrPosGrid->Cells[3][nRow+1].w_str()) != _wtof(MtrPosGrid->Cells[6][nRow+1].w_str()))
				MainForm->MachineHistoryData(String().sprintf(L"[MTR] MOTOR_WRITE AXIS[ %d ]INDEX[ %d ]SPD[ %s -> %s ]TYPE[ %d ]",_nAxis_no,nRow,MtrPosGrid->Cells[6][nRow+1],MtrPosGrid->Cells[3][nRow+1],_flagCmn[nRow]));

			if(_wtof(MtrPosGrid->Cells[4][nRow+1].w_str()) != _wtof(MtrPosGrid->Cells[7][nRow+1].w_str()))
				MainForm->MachineHistoryData(String().sprintf(L"[MTR] MOTOR_WRITE AXIS[ %d ]INDEX[ %d ]ACC[ %s -> %s ]TYPE[ %d ]",_nAxis_no,nRow,MtrPosGrid->Cells[7][nRow+1],MtrPosGrid->Cells[4][nRow+1],_flagCmn[nRow]));
		}
		
		if(MainForm->b_TpConnect)
		{
			if(MtrPosGrid->Cells[1][nRow+1] != "")
			{
				String sMotorName = ReadStringFromRootInifile("MotorName.ini","AXISNAME","AXIS"+IntToStr(_nAxis_no));
				String strData = "", strIndex = "";
				strIndex= "'"+MtrPosGrid->Cells[1][nRow+1];

				if(MtrPosGrid->Cells[2][nRow+1] != MtrPosGrid->Cells[5][nRow+1])
				{
					strData = "[2,"+MtrPosGrid->Cells[5][nRow+1]+","+MtrPosGrid->Cells[2][nRow+1]+"]";
					String strIndexPos = strIndex + "_POS'";
					g_pTpBase->logConfigure(sMotorName.c_str(),L"CHANGE",L"'CHANGE_ITEM'",strIndexPos.c_str(),L"'VALUE'",strData.c_str());
				}
				if(MtrPosGrid->Cells[3][nRow+1] != MtrPosGrid->Cells[6][nRow+1])
				{
					 strData = "[2,"+MtrPosGrid->Cells[6][nRow+1]+","+MtrPosGrid->Cells[3][nRow+1]+"]";
					 String strIndexSpd = strIndex + "_SPD'";
					 g_pTpBase->logConfigure(sMotorName.c_str(),L"CHANGE",L"'CHANGE_ITEM'",strIndexSpd.c_str(),L"'VALUE'",strData.c_str());
				}
			}
		}
	}

	delete cmnIni;
	delete iniName;
	delete ini;
	return true;
}
//------------------------------------------------------------------------

bool    TFrmMotorControl::MtrData_SaveSEQ()
{
	g_MMIComm->m_mmiToSeq.nCmd  = CMD_RD_MT_TABLE;
	g_MMIComm->m_mmiToSeq.buffer.motTable.nMtNo = _nAxis_no;

    if ( g_MMIComm->Send() &&  g_MMIComm->Recv())
	{
        for(int i=0; i<_MOTOR_IDNEX_COUNT_; i++)
		{
			if(_flagCmn[i] && BtnCmnUnLock->Tag == LOCKED_) continue;

			if(MtrPosGrid->Cells[2][i+1] != "")
			{
				g_MMIComm->m_mmiToSeq.buffer.motTable.dPos [i] = MtrPosGrid->Cells[2][i+1].ToDouble()*1000;
            }
			else
			{
				g_MMIComm->m_mmiToSeq.buffer.motTable.dPos [i] = 0.;

			}

			if(MtrPosGrid->Cells[3][i+1] !="")
            {
				g_MMIComm->m_mmiToSeq.buffer.motTable.dVel [i] = MtrPosGrid->Cells[3][i+1].ToDouble()*1000;
            }
			else
            {
				g_MMIComm->m_mmiToSeq.buffer.motTable.dVel [i] = 0.;

			}

			if(MtrPosGrid->Cells[4][i+1] !="")
            {
                g_MMIComm->m_mmiToSeq.buffer.motTable.dAcc [i] = MtrPosGrid->Cells[4][i+1].ToDouble()*1000;
			}
            else
            {
                g_MMIComm->m_mmiToSeq.buffer.motTable.dAcc [i] = 0.;

            }
        }

        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_TABLE;
        if(g_MMIComm->Send()  && g_MMIComm->Recv())
        {
            return true;
        }
    }
    else
    {
        return false;
    }
}
//------------------------------------------------------------------------

void __fastcall TFrmMotorControl::MtrPosGridDrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect,
		  TGridDrawState State)
{
	TColor brush = clWhite;
	TColor font = clBlack;

	if(ARow == 0 || ACol == 0)
	{
		brush = clBtnFace;
		font = clBlack;
	}
	else
	{
		if(ACol > 4 && (MtrPosGrid->Cells[ACol-3][ARow].ToDouble() != MtrPosGrid->Cells[ACol][ARow].ToDouble()))
		{
			brush = clRed;
			font = clBlack;
		}
		else
		{

			if(_flagCmn[ARow-1])
			{
				if(BtnCmnUnLock->Tag == LOCKED_)
				{
					brush = clMoneyGreen;
				}
				else
				{
					brush = clWhite;
				}

				font = clGreen;
			}
			else
			{
				brush = clWhite;
				font = clBlack;
			}
		}
	}

	MtrPosGrid->Canvas->Brush->Color = brush;
	MtrPosGrid->Canvas->Font->Color = font;

	MtrPosGrid->Canvas->FillRect(MtrPosGrid->CellRect(ACol,ARow));
	DrawText(	MtrPosGrid->Canvas->Handle,
				MtrPosGrid->Cells[ACol][ARow].c_str(),
				MtrPosGrid->Cells[ACol][ARow].Length(),
				&Rect,
				DT_CENTER | DT_SINGLELINE | DT_VCENTER);
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::MtrPosGridSelectCell(TObject *Sender, int ACol, int ARow,
          bool &CanSelect)
{
	if(ARow > 0 && CanSelect == true)
	{
		_nSelectIndex = ARow -1 ;
        String StrSelectPosition = "POS: " +  MtrPosGrid->Cells[5][ARow];
        String StrSelectSpeed =  "  SPD: " +MtrPosGrid->Cells[6][ARow];
        String StrSelectAcccel = "  ACCEL: " + MtrPosGrid->Cells[7][ARow];

		PanelMtrSelectIndex->Caption = "SELECT : " + IntToStr(_nSelectIndex) + " : " + StrSelectPosition +  StrSelectSpeed + StrSelectAcccel;
	}
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnAxisMinusChangeClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	if(_nAxis_no >= 1)
    {
		MtrAxis_SelectedProcess(_nAxis_no-1);
    }
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnAxisPlusChangeClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	if(_nAxis_no < (MAX_MT_NO-1))
    {
		MtrAxis_SelectedProcess(_nAxis_no+1);
    }
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnAxisSelectClick(TObject *Sender)
{
	//AxisSelectForm->AxisSelect_Initialize(this);
	TfrmSelectAxis* sel = new TfrmSelectAxis(this, this);
	sel->ShowModal();
	delete sel;
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnInputMotionDataClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;

	BtnInputMotionData->Enabled = false;
	BtnSaveMotionData->Enabled = true;
	MtrPosGrid->Options << goEditing;
	MtrPosGrid->Options >> goRowSelect;
	MtrRefreshTimer->Enabled = false;
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnSaveMotionDataClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;

    BtnInputMotionData->Enabled = true;
	BtnSaveMotionData->Enabled = false;

	MtrPosGrid->Options >> goEditing;
    MtrPosGrid->Options << goRowSelect;

	if(MtrData_SaveDB() == true)
    {
        if(MtrData_SaveSEQ() == true )
        {
            if(MtrData_ReadDB() == true)
            {
                if(MtrData_ReadSEQ() == true)
                {
					FrmCdBox->QueryMsg("MOTOR SEQ READ OK", "MOTOR DATA SAVE SUCCESS!", CD_OK );

					FormSecsGemSet->GemRecipeChange();
                }
                else
                {
                	FrmCdBox->QueryMsg("MOTOR SEQ READ FAIL", "MOTOR DATA SAVE FAIL! -> 4STEP", CD_OK );
                }
            }
            else
            {
                FrmCdBox->QueryMsg("MOTOR SEQ READ FAIL", "MOTOR DATA SAVE FAIL! -> 2STEP", CD_OK );
            }
        }
        else
        {
            FrmCdBox->QueryMsg("MOTOR SEQ READ FAIL", "MOTOR DATA SAVE FAIL! -> 2STEP", CD_OK );
        }
    }
    else
    {
    	FrmCdBox->QueryMsg("MOTOR SEQ READ FAIL", "MOTOR DATA SAVE FAIL! -> 1STEP", CD_OK );
    }

	MtrRefreshTimer->Enabled = true;
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnIndexMoveClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
    FrmCdBox->setFlag(CD_YESNO);
	FrmCdBox->setTitle( "WARNING" );
	FrmCdBox->setText( "INDEX_MOVE" );
	if( mrYes == FrmCdBox->ShowModal())
	{
        g_MMIComm->m_mmiToSeq.nCmd  = CMD_WR_MT_CMD;
		g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo =_nAxis_no;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd  = MTCMD_INDEX_MOVE;
		g_MMIComm->m_mmiToSeq.buffer.motControl.nCmdIndexNo = _nSelectIndex;
		g_MMIComm->Send();   g_MMIComm->Recv();
    }
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnIndexWriteClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;

	if(BtnCmnUnLock->Tag == LOCKED_)
	{
		String StrNamePath = ExtractFilePath(Application->ExeName)+ "\\Ini\\MotorIndexName.ini";
		TIniFile *iniName = new TIniFile(StrNamePath);
		bool flag = iniName->ReadBool("INDEXNAME"+IntToStr(_nAxis_no),"COMMON"+IntToStr(_nSelectIndex),true);
		delete iniName;

		if(flag)
		{
			FrmCdBox->setFlag(CD_OK);
			FrmCdBox->setTitle("WRITE FAILED");
			FrmCdBox->setText("Common parameter was locked. can not write to this index.");
			FrmCdBox->BringToFront();
			FrmCdBox->ShowModal();
			return;
		}
	}

	MtrPosGrid->Cells[2][_nSelectIndex+1] = MtrPostionLabel->Caption;

	BtnInputMotionData->Enabled = false;
	BtnSaveMotionData->Enabled = true;
	MtrPosGrid->Options << goEditing;
	MtrPosGrid->Options >> goRowSelect;
	MtrRefreshTimer->Enabled = false;
}
//---------------------------------------------------------------------------
bool TFrmMotorControl::IndexDataSaveMotionDataToDB(int nIndex , String StrPos)
{
	bool bRtn = false;
	int nGrpNo, nRcpNo;
    nGrpNo = nReadGroupNo();
    nRcpNo = nReadRecipeNo();

	String strCmnPath = ExtractFilePath(Application->ExeName)+ "\\Ini\\system\\GRP0\\RCP0\\Motor"+ IntToStr(_nAxis_no)+".ini";
	String StrPath = ExtractFilePath(Application->ExeName)+ "\\Ini\\system\\GRP"+IntToStr(nGrpNo)+"\\RCP"+IntToStr(nRcpNo)+"\\Motor"+ IntToStr(_nAxis_no)+".ini";

    if(FileExists(StrPath))
    {
		TIniFile *ini = new TIniFile(StrPath);
		TIniFile *cmnIni = new TIniFile(strCmnPath);
		try
		{
			ini->WriteString("INDEXPOS","POSITION"+IntToStr(nIndex),StrPos);
			if(_flagCmn[nIndex])
			{
				cmnIni->WriteString("INDEXPOS","POSITION"+IntToStr(nIndex),StrPos);
			}

			if(MainForm->b_TpConnect)
			{
				String sMotorName = ReadStringFromRootInifile("MotorName.ini","AXISNAME","AXIS"+IntToStr(_nAxis_no));
				String strData = "", strIndex = "";
				if(MtrPosGrid->Cells[2][nIndex+1] != MtrPosGrid->Cells[5][nIndex+1])
				{
					strIndex= "'"+MtrPosGrid->Cells[1][nIndex+1]+"_POS'";
					strData = "[2,"+MtrPosGrid->Cells[5][nIndex+1]+","+MtrPosGrid->Cells[2][nIndex+1]+"]";
					g_pTpBase->logConfigure(sMotorName.c_str(),L"CHANGE",L"'CHANGE_ITEM'",strIndex.c_str(),L"'VALUE'",strData.c_str());
				}
			}
			bRtn = true;
			delete cmnIni;
			delete ini;
		}
		catch(Exception& e)
		{
			delete cmnIni;
			delete ini;
		}
	}
	else
	{
	}

	return bRtn;
}
//---------------------------------------------------------------------------
bool TFrmMotorControl::IndexDataSaveMotionDataToMotion(int nIndex , String StrPos)
{
	bool bRtn = false;
    MtrRefreshTimer->Enabled = false;

    g_MMIComm->m_mmiToSeq.nCmd  = CMD_RD_MT_TABLE;
    g_MMIComm->m_mmiToSeq.buffer.motTable.nMtNo = _nAxis_no;

    if ( g_MMIComm->Send() &&  g_MMIComm->Recv())
	{
    	g_MMIComm->m_mmiToSeq.buffer.motTable.dPos[nIndex] = StrPos.ToDouble()*1000.0;

        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_TABLE;
        if(g_MMIComm->Send()  && g_MMIComm->Recv())
        {
			bRtn = true;
        }
    }
	MtrRefreshTimer->Enabled = true;

	return bRtn;
}

//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnServoControlClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	if(bServoOnOff  == true)
	{
		FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle( "MOTION_CONTROL"  );
		FrmCdBox->setText( "SERVO_OFF"  );

		if( mrYes == FrmCdBox->ShowModal())
		{
			g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
			g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_SERVO_OFF;
			g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
            g_MMIComm->Send() && g_MMIComm->Recv();
        }
    }
    else
	{
        FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle( "MOTION_CONTROL"  );
		FrmCdBox->setText( "SERVO_ON"  );
		if( mrYes == FrmCdBox->ShowModal())
		{
			g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
			g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_SERVO_ON;
			g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
            g_MMIComm->Send() && g_MMIComm->Recv();
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::PanelTenkeyJogClick(TObject *Sender)
{
	int nTemp = nReadCommunicationDM(tenKeyJog);
	if(nTemp == _JOGMODE_VALUE_DISABLE_)
	{
		FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle( "MOTION_CONTROL"  );
		FrmCdBox->setText( "TENKEY MODE ON"  );

		if( mrYes == FrmCdBox->ShowModal())
		{
			nWriteCommunicationDM( _JOGMODE_VALUE_ENABLE_ , tenKeyJog);
        }
    }
    else
	{
        FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle( "MOTION_CONTROL"  );
		FrmCdBox->setText( "TENKEY MODE OFF"  );
		if( mrYes == FrmCdBox->ShowModal())
		{
			nWriteCommunicationDM( _JOGMODE_VALUE_DISABLE_ , tenKeyJog);
        }
    }
	nWriteCommunicationDM( _nAxis_no , jogAxisNo);
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnTenkeyJogClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	int nTemp = nReadCommunicationDM(tenKeyJog);
	if(nTemp == _JOGMODE_VALUE_DISABLE_)
	{
		FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle( "MOTION_CONTROL"  );
		FrmCdBox->setText( "TENKEY MODE ON"  );

		if( mrYes == FrmCdBox->ShowModal())
		{
			nWriteCommunicationDM( _JOGMODE_VALUE_ENABLE_ , tenKeyJog);
        }
    }
    else
	{
        FrmCdBox->setFlag(CD_YESNO);
		FrmCdBox->setTitle( "MOTION_CONTROL"  );
		FrmCdBox->setText( "TENKEY MODE OFF"  );
		if( mrYes == FrmCdBox->ShowModal())
		{
			nWriteCommunicationDM( _JOGMODE_VALUE_DISABLE_ , tenKeyJog);
        }
    }
	nWriteCommunicationDM( _nAxis_no , jogAxisNo);
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnAxisMotorHomeClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
    FrmCdBox->setFlag(CD_YESNO);
	FrmCdBox->setTitle( "MOTION_CONTROL" );
	FrmCdBox->setText("HOME_MOVE_CONTROL" );
	if( mrYes == FrmCdBox->ShowModal())
	{
        g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo  = _nAxis_no;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd  = MTCMD_HOME;
        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
        g_MMIComm->Send() && g_MMIComm->Recv();
    }
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnAxisMotorStopClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	FrmCdBox->setFlag(CD_YESNO);
	FrmCdBox->setTitle( "MOTION_CONTROL");
	FrmCdBox->setText("MOTOR_MOVING_STOP");
	if( mrYes == FrmCdBox->ShowModal())
    {
        g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_STOP;
        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
		g_MMIComm->Send() && g_MMIComm->Recv();
    }
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnAxisMotorResetClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
    FrmCdBox->setFlag(CD_YESNO);
	FrmCdBox->setTitle( "MOTION_CONTROL" );
	FrmCdBox->setText( "MOTOR_STATUS_RESET" );
    if( mrYes == FrmCdBox->ShowModal())
    {
        g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo =_nAxis_no;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_RESET;
        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
        g_MMIComm->Send() && g_MMIComm->Recv();
    }
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnJogSpeedApplyClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;

	if(EditJogSpeed->Text == "")
    {
    	EditJogSpeed->Text ="0";
    }

    double dData = StrToFloat(EditJogSpeed->Text);
    nWriteCommunicationDM(dData , jogSpeed);

    EditJogSpeed->Text= FloatToStr( nReadCommunicationDM( jogSpeed ) );
}
//---------------------------------------------------------------------------



void __fastcall TFrmMotorControl::BtnAxisConfigClick(TObject *Sender)
{
    FrmCdBox->setFlag(CD_YESNO);
	FrmCdBox->setTitle( "MOTION_CONTROL" );
	FrmCdBox->setText( "Do you attempt to change the motor information?");
    if( mrYes == FrmCdBox->ShowModal())
	{
		MotorAxisConfig->ShowModal();
    }
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::MtrRefreshTimerTimer(TObject *Sender)
{
    g_MMIComm->m_mmiToSeq.nCmd = CMD_RD_MT_STATUS;

	g_MMIComm->m_mmiToSeq.buffer.motStatus.nMtNo = _nAxis_no;
    if ( g_MMIComm->Send() &&  g_MMIComm->Recv())
    {
        MtrPostionLabel->Caption = FloatToStrF(g_MMIComm->m_mmiToSeq.buffer.motStatus.dRealCnt/1000.0, ffFixed, 10, 3 );

        int nValue =  g_MMIComm->m_mmiToSeq.buffer.motStatus.nCurIndex;

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bCw == true)
        {
            Status_Led(MtrPanelLed1 ,_STATUS_LED_GREEN_ , true , "ON");
        }
        else
        {
            Status_Led(MtrPanelLed1 ,_STATUS_LED_GREEN_ , false , "OFF");
        }

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bHome == true)
        {
            Status_Led(MtrPanelLed2 ,_STATUS_LED_GREEN_ , true , "ON");
        }
        else
        {
            Status_Led(MtrPanelLed2 ,_STATUS_LED_GREEN_ , false , "OFF");
        }

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bDriving  == true)
        {
            Status_Led(MtrPanelLed3 ,_STATUS_LED_GREEN_ , true , "ON");
        }
        else
        {
            Status_Led(MtrPanelLed3 ,_STATUS_LED_GREEN_ , false , "OFF");
        }

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bOrg == true)
        {
            Status_Led(MtrPanelLed4 ,_STATUS_LED_GREEN_ , true , "ON");
        }
        else
        {
            Status_Led(MtrPanelLed4 ,_STATUS_LED_GREEN_ , false , "OFF");
        }

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bAlarm == true)
        {
            Status_Led(MtrPanelLed5 ,_STATUS_LED_GREEN_ , true , "ON");
        }
        else
        {
            Status_Led(MtrPanelLed5 ,_STATUS_LED_GREEN_ , false , "OFF");
        }

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bCCw == true)
        {
            Status_Led(MtrPanelLed6 ,_STATUS_LED_GREEN_ , true , "ON");
        }
        else
        {
            Status_Led(MtrPanelLed6 ,_STATUS_LED_GREEN_ , false , "OFF");
        }

        if(g_MMIComm->m_mmiToSeq.buffer.motStatus.bServoOn == true)
        {
            Status_Led(PanelServoOnOff ,_STATUS_LED_GREEN_ , true , "SERVO ON");
            bServoOnOff = true;
        }
        else
        {
            Status_Led(PanelServoOnOff ,_STATUS_LED_GREEN_ , false , "SERVO OFF");
            bServoOnOff = false;
        }
    }

    int nTempVal  = nReadCommunicationDM (tenKeyJog);
    if(nTempVal == _JOGMODE_VALUE_DISABLE_)
    {
    	PanelTenkeyJog ->Color = clGray;
    }
    else
    {
    	PanelTenkeyJog ->Color = clRed;
    }

    BtnAxisMinusChange->Enabled = !bool(nTempVal);
    BtnAxisPlusChange->Enabled = !bool(nTempVal);
    BtnAxisSelect->Enabled = !bool(nTempVal);
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::PanelVisibleSensorMouseDown(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
    ReleaseCapture();
    PanelVisibleSensor->Perform(WM_SYSCOMMAND,0xf012,0);
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnSubSensorClick(TObject *Sender)
{
	PanelVisibleSensor->Visible = PanelVisibleSensor->Visible ? 0 : 1;

    if(PanelVisibleSensor->Visible == true)
    {
        PanelVisibleSensor->Left =  this->Width /4;
        PanelVisibleSensor->Top  =  this->Height /4;
    }

    PanelSensorView->Color = PanelVisibleSensor->Visible ? clLime : clGray;
}
//---------------------------------------------------------------------------
void __fastcall TFrmMotorControl::BtnAxisMotorSetClick(TObject *Sender)
{
	MotorAxisConfig->ShowModal();
    Motorscreen_Initialize(0);
}
//---------------------------------------------------------------------------


void __fastcall TFrmMotorControl::FormDestroy(TObject *Sender)
{
    for(int i = 0; i < 2; i++)
    {
        if(pSensorFrm[i])
        {
            delete pSensorFrm[i];
            pSensorFrm[i] = NULL;
        }
    }
}
//---------------------------------------------------------------------------


void __fastcall TFrmMotorControl::PanelVisibleSensorDblClick(TObject *Sender)
{
	PanelVisibleSensor->Visible = false;
    PanelSensorView->Color = PanelVisibleSensor->Visible ? clLime : clGray;
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnJogPositiveClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	if(_nJogControl == MTCMD_R_MOVE)
    {
        FrmCdBox->setFlag(CD_YESNO);
        FrmCdBox->setTitle( "MOTION_CONTROL" );
        FrmCdBox->setText( StrJogCaptionRight);
		if( mrYes == FrmCdBox->ShowModal())
        {
            g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
            g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = _nJogControl;
            g_MMIComm->m_mmiToSeq.buffer.motControl.nDir =_nRightDirect;
            g_MMIComm->m_mmiToSeq.buffer.motControl.dPulse =  EditJogPosition->Text.ToDouble() * 1000.0;
            g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
            g_MMIComm->Send() && g_MMIComm->Recv();
        }
    }

}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnJogNegativeClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	if(_nJogControl == MTCMD_R_MOVE)
    {
        FrmCdBox->setFlag(CD_YESNO);
        FrmCdBox->setTitle( "MOTION_CONTROL" );
        FrmCdBox->setText( StrJogCaptionLeft );
        if( mrYes == FrmCdBox->ShowModal())
        {
            g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
            g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = _nJogControl;
            g_MMIComm->m_mmiToSeq.buffer.motControl.nDir = _nLeftDirect;
            g_MMIComm->m_mmiToSeq.buffer.motControl.dPulse =  EditJogPosition->Text.ToDouble() * 1000.0;
            g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
            g_MMIComm->Send() && g_MMIComm->Recv();
        }
    }

}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnRMoveClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;
	_nJogControl = dynamic_cast<TButton *>(Sender)->Tag;
    JogControlEdit->Text = "JOG MOVE";
	if(_nJogControl == MTCMD_R_MOVE)
    {
		JogControlEdit->Text = "R MOVE";
    }

    StrJogCheckCaption = JogControlEdit->Text ;


    TIniFile *ini = new TIniFile(ExtractFilePath(Application->ExeName)+ "\\Ini\\MotorName.ini");

    String strTemp = ini->ReadString("AXISSET","DIRECT"+IntToStr(_nAxis_no),"1");
    String StrCaption = ini->ReadString("AXISSET","JOGNAME"+IntToStr(_nAxis_no),"X");

	_nRightDirect = _MOTOR_NEGATIVE_DIRECTION_;
    _nLeftDirect  = _MOTOR_POSITIVE_DIRECTION_;


    BtnJogPositive->Caption = StrJogCheckCaption + "- " + StrCaption + " MOVE";
    BtnJogNegative->Caption = StrJogCheckCaption + "+ " + StrCaption + " MOVE";

    if(strTemp == "1")
    {
        _nLeftDirect = _MOTOR_NEGATIVE_DIRECTION_;
        _nRightDirect = _MOTOR_POSITIVE_DIRECTION_;

        BtnJogPositive->Caption = StrJogCheckCaption + "+ " + StrCaption + " MOVE";
        BtnJogNegative->Caption = StrJogCheckCaption + "- " + StrCaption + " MOVE";

    }

    delete ini;

}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnJogPositiveMouseDown(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
		if(_nJogControl == MTCMD_A_MOVE)
		{
            g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
			g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd  = MTCMD_JOG_MOVE;
			g_MMIComm->m_mmiToSeq.buffer.motControl.nDir = _nRightDirect;

			g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
			g_MMIComm->Send()   && g_MMIComm->Recv();
		}
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnJogPositiveMouseUp(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
		if(_nJogControl == MTCMD_A_MOVE)
		{
            g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
			g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_JOG_STOP;
			g_MMIComm->m_mmiToSeq.buffer.motControl.nDir   = _nRightDirect;

			g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
			g_MMIComm->Send()   && g_MMIComm->Recv();
		}
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnJogNegativeMouseDown(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
    if(_nJogControl == MTCMD_A_MOVE)
    {
        g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd  = MTCMD_JOG_MOVE;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nDir =  _nLeftDirect;

        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
        g_MMIComm->Send()   && g_MMIComm->Recv();
    }
}
//---------------------------------------------------------------------------


void __fastcall TFrmMotorControl::BtnJogNegativeMouseUp(TObject *Sender, TMouseButton Button,
          TShiftState Shift, int X, int Y)
{
    if(_nJogControl == MTCMD_A_MOVE)
    {
        g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_JOG_STOP;
        g_MMIComm->m_mmiToSeq.buffer.motControl.nDir   =_nLeftDirect ;

        g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
        g_MMIComm->Send()  && g_MMIComm->Recv();
    }
}
//---------------------------------------------------------------------------




void __fastcall TFrmMotorControl::SpeedButton1Click(TObject *Sender)
{
    if(CheckCanAccessLevel(PW_ENGINEER))
    {
        FrmCommonSet->ShowModal();
        this->MtrData_ReadDB();
	}
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::BtnCmnUnLockClick(TObject *Sender)
{
	if(BtnCmnUnLock->Tag == LOCKED_)
	{
		if(CheckCanAccessLevel(PW_ENGINEER))
		{
			BtnCmnUnLock->Glyph = ImageUnlock->Picture->Bitmap;
			BtnCmnUnLock->Tag = UNLOCKED_;
		}
	}
	else
	{
		BtnCmnUnLock->Glyph = ImageLock->Picture->Bitmap;
		BtnCmnUnLock->Tag = LOCKED_;
	}

	MtrPosGrid->Repaint();
}
//---------------------------------------------------------------------------

void __fastcall TFrmMotorControl::SpeedButtonAMoveClick(TObject *Sender)
{
	if(!CheckCanDataAccess()) return;

	FrmCdBox->setFlag(CD_YESNO);
	FrmCdBox->setTitle( "MOTION_CONTROL" );
	FrmCdBox->setText( "A-MOVE" );
	if( mrYes == FrmCdBox->ShowModal())
	{
		g_MMIComm->m_mmiToSeq.buffer.motControl.nMtNo = _nAxis_no;
		g_MMIComm->m_mmiToSeq.buffer.motControl.nCmd = MTCMD_A_MOVE;
		g_MMIComm->m_mmiToSeq.buffer.motControl.nDir = 0;
		g_MMIComm->m_mmiToSeq.buffer.motControl.dPulse =  EditAMoveValue->Text.ToDouble() * 1000.0;
		g_MMIComm->m_mmiToSeq.nCmd = CMD_WR_MT_CMD;
		g_MMIComm->Send() && g_MMIComm->Recv();
	}
}
//---------------------------------------------------------------------------

