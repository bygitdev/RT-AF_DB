// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 2017-11-02 오전 9:26:33 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\PROGRA~2\LINKGE~1\XGEMV3~1.X\SE\Bin\eXGem.ocx (1)
// LIBID: {B1594C47-316E-46A0-BED1-58A864F882B1}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   eXGemLib_TLBH
#define   eXGemLib_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Exgemlib_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_eXGemLib;
extern __declspec (package) const GUID DIID__DeXGem;
extern __declspec (package) const GUID DIID__DeXGemEvents;
extern __declspec (package) const GUID CLSID_eXGem;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{6F88E29E-8982-49D6-9ACC-CBD4952D6D3B}") _DeXGem;
typedef TComInterface<_DeXGem, &DIID__DeXGem> _DeXGemPtr;

interface DECLSPEC_UUID("{F0B2A415-B60D-4F3D-BDA6-D82551C59CFA}") _DeXGemEvents;
typedef TComInterface<_DeXGemEvents, &DIID__DeXGemEvents> _DeXGemEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DeXGem eXGem;
typedef _DeXGemPtr eXGemPtr;

#define LIBID_OF_eXGem (&LIBID_eXGemLib)
// *********************************************************************//
// Interface: _DeXGem
// Flags:     (4096) Dispatchable
// GUID:      {6F88E29E-8982-49D6-9ACC-CBD4952D6D3B}
// *********************************************************************//
interface _DeXGem : public TDispWrapper<IDispatch>
{
  void __fastcall set_IP(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* IP */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_IP()
  {
    _TDispID _dispid(/* IP */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Port(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Port */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Port()
  {
    _TDispID _dispid(/* Port */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Active(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Active */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Active()
  {
    _TDispID _dispid(/* Active */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall AboutBox()
  {
    _TDispID _dispid(/* AboutBox */ DISPID(-552));
    OleProcedure(_dispid);
  }

  long __fastcall Initialize(BSTR sCfg)
  {
    _TDispID _dispid(/* Initialize */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = sCfg /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Start()
  {
    _TDispID _dispid(/* Start */ DISPID(5));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Stop()
  {
    _TDispID _dispid(/* Stop */ DISPID(6));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall Close()
  {
    _TDispID _dispid(/* Close */ DISPID(7));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall MakeObject(long* pnObjectID)
  {
    _TDispID _dispid(/* MakeObject */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = pnObjectID /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetList(long nObjectID, long nItemCount)
  {
    _TDispID _dispid(/* SetList */ DISPID(9));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetList(long nObjectID, long* pnItemCount)
  {
    _TDispID _dispid(/* GetList */ DISPID(10));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnItemCount /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetVariables(long nObjectID, long nVid)
  {
    _TDispID _dispid(/* GEMSetVariables */ DISPID(11));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = nVid /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SendSECSMessage(long nObjectID, long nStream, long nFunction, long nSysbyte)
  {
    _TDispID _dispid(/* SendSECSMessage */ DISPID(12));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = nStream /*[VT_I4:0]*/;
    _args[3] = nFunction /*[VT_I4:0]*/;
    _args[4] = nSysbyte /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqOffline()
  {
    _TDispID _dispid(/* GEMReqOffline */ DISPID(13));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqLocal()
  {
    _TDispID _dispid(/* GEMReqLocal */ DISPID(14));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqRemote()
  {
    _TDispID _dispid(/* GEMReqRemote */ DISPID(15));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetEstablish(long bState)
  {
    _TDispID _dispid(/* GEMSetEstablish */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = bState /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetParam(BSTR sParamName, BSTR sParamValue)
  {
    _TDispID _dispid(/* GEMSetParam */ DISPID(17));
    TAutoArgs<2> _args;
    _args[1] = sParamName /*[VT_BSTR:0]*/;
    _args[2] = sParamValue /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetParam(BSTR sParamName, BSTR* psParamValue)
  {
    _TDispID _dispid(/* GEMGetParam */ DISPID(18));
    TAutoArgs<2> _args;
    _args[1] = sParamName /*[VT_BSTR:0]*/;
    _args[2] = psParamValue /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMEQInitialized(long nInitType)
  {
    _TDispID _dispid(/* GEMEQInitialized */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = nInitType /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqGetDateTime()
  {
    _TDispID _dispid(/* GEMReqGetDateTime */ DISPID(20));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspGetDateTime(long nMsgId, BSTR sSystemTime)
  {
    _TDispID _dispid(/* GEMRspGetDateTime */ DISPID(21));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sSystemTime /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspDateTime(long nMsgId, long nResult)
  {
    _TDispID _dispid(/* GEMRspDateTime */ DISPID(22));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetAlarm(long nID, long nState)
  {
    _TDispID _dispid(/* GEMSetAlarm */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = nID /*[VT_I4:0]*/;
    _args[2] = nState /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspRemoteCommand(long nMsgId, BSTR sCmd, long nHCAck, long nCount, 
                                      long* pnResult)
  {
    _TDispID _dispid(/* GEMRspRemoteCommand */ DISPID(24));
    TAutoArgs<5> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sCmd /*[VT_BSTR:0]*/;
    _args[3] = nHCAck /*[VT_I4:0]*/;
    _args[4] = nCount /*[VT_I4:0]*/;
    _args[5] = pnResult /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspChangeECV(long nMsgId, long nResult)
  {
    _TDispID _dispid(/* GEMRspChangeECV */ DISPID(25));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetECVChanged(long nCount, long* pnEcIds, BSTR* psEcVals)
  {
    _TDispID _dispid(/* GEMSetECVChanged */ DISPID(26));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnEcIds /*[VT_I4:1]*/;
    _args[3] = psEcVals /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetPPChanged(long nMode, BSTR sPpid, long nSize, BSTR sBody)
  {
    _TDispID _dispid(/* GEMSetPPChanged */ DISPID(27));
    TAutoArgs<4> _args;
    _args[1] = nMode /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = nSize /*[VT_I4:0]*/;
    _args[4] = sBody /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetPPFmtChanged(long nMode, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount
                                     , BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
  {
    _TDispID _dispid(/* GEMSetPPFmtChanged */ DISPID(28));
    TAutoArgs<8> _args;
    _args[1] = nMode /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sMdln /*[VT_BSTR:0]*/;
    _args[4] = sSoftRev /*[VT_BSTR:0]*/;
    _args[5] = nCount /*[VT_I4:0]*/;
    _args[6] = psCCode /*[VT_BSTR:1]*/;
    _args[7] = pnParamCount /*[VT_I4:1]*/;
    _args[8] = psParamNames /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPLoadInquire(BSTR sPpid, long nLength)
  {
    _TDispID _dispid(/* GEMReqPPLoadInquire */ DISPID(29));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = nLength /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPLoadInquire(long nMsgId, BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* GEMRspPPLoadInquire */ DISPID(30));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPSend(BSTR sPpid, BSTR sBody)
  {
    _TDispID _dispid(/* GEMReqPPSend */ DISPID(31));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sBody /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPSend(long nMsgId, BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* GEMRspPPSend */ DISPID(32));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPP(BSTR sPpid)
  {
    _TDispID _dispid(/* GEMReqPP */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPP(long nMsgId, BSTR sPpid, BSTR sBody)
  {
    _TDispID _dispid(/* GEMRspPP */ DISPID(34));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sBody /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPDelete(long nMsgId, long nCount, BSTR* psPpids, long nResult)
  {
    _TDispID _dispid(/* GEMRspPPDelete */ DISPID(35));
    TAutoArgs<4> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nCount /*[VT_I4:0]*/;
    _args[3] = psPpids /*[VT_BSTR:1]*/;
    _args[4] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPList(long nMsgId, long nCount, BSTR* psPpids)
  {
    _TDispID _dispid(/* GEMRspPPList */ DISPID(36));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nCount /*[VT_I4:0]*/;
    _args[3] = psPpids /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPFmtSend(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode
                                  , long* pnParamCount, BSTR* psParamNames)
  {
    _TDispID _dispid(/* GEMReqPPFmtSend */ DISPID(37));
    TAutoArgs<7> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sMdln /*[VT_BSTR:0]*/;
    _args[3] = sSoftRev /*[VT_BSTR:0]*/;
    _args[4] = nCount /*[VT_I4:0]*/;
    _args[5] = psCCode /*[VT_BSTR:1]*/;
    _args[6] = pnParamCount /*[VT_I4:1]*/;
    _args[7] = psParamNames /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPFmtSend(long nMsgId, BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* GEMRspPPFmtSend */ DISPID(38));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPFmt(BSTR sPpid)
  {
    _TDispID _dispid(/* GEMReqPPFmt */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPFmt(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                              BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
  {
    _TDispID _dispid(/* GEMRspPPFmt */ DISPID(40));
    TAutoArgs<8> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sMdln /*[VT_BSTR:0]*/;
    _args[4] = sSoftRev /*[VT_BSTR:0]*/;
    _args[5] = nCount /*[VT_I4:0]*/;
    _args[6] = psCCode /*[VT_BSTR:1]*/;
    _args[7] = pnParamCount /*[VT_I4:1]*/;
    _args[8] = psParamNames /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPFmtVerification(BSTR sPpid, long nCount, long* pnAck, BSTR* psSeqNumber, 
                                          BSTR* psError)
  {
    _TDispID _dispid(/* GEMReqPPFmtVerification */ DISPID(41));
    TAutoArgs<5> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = nCount /*[VT_I4:0]*/;
    _args[3] = pnAck /*[VT_I4:1]*/;
    _args[4] = psSeqNumber /*[VT_BSTR:1]*/;
    _args[5] = psError /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetTerminalMessage(long nTid, BSTR sMsg)
  {
    _TDispID _dispid(/* GEMSetTerminalMessage */ DISPID(42));
    TAutoArgs<2> _args;
    _args[1] = nTid /*[VT_I4:0]*/;
    _args[2] = sMsg /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetVariable(long nCount, long* pnVid, BSTR* psValue)
  {
    _TDispID _dispid(/* GEMSetVariable */ DISPID(43));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnVid /*[VT_I4:1]*/;
    _args[3] = psValue /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMEnableLog(long bEnabled)
  {
    _TDispID _dispid(/* GEMEnableLog */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = bEnabled /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetLogOption(BSTR sDriectory, BSTR sPrefix, BSTR sExtension, long nKeepDay, 
                                  long bMakeDailyLog, long bMakeSubDirectory)
  {
    _TDispID _dispid(/* GEMSetLogOption */ DISPID(45));
    TAutoArgs<6> _args;
    _args[1] = sDriectory /*[VT_BSTR:0]*/;
    _args[2] = sPrefix /*[VT_BSTR:0]*/;
    _args[3] = sExtension /*[VT_BSTR:0]*/;
    _args[4] = nKeepDay /*[VT_I4:0]*/;
    _args[5] = bMakeDailyLog /*[VT_I4:0]*/;
    _args[6] = bMakeSubDirectory /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetEvent(long nEventID)
  {
    _TDispID _dispid(/* GEMSetEvent */ DISPID(46));
    TAutoArgs<1> _args;
    _args[1] = nEventID /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetVariable(long nCount, long* pnVid, BSTR* psValue)
  {
    _TDispID _dispid(/* GEMGetVariable */ DISPID(47));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnVid /*[VT_I4:1]*/;
    _args[3] = psValue /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetSpecificMessage(long nObjectID, BSTR sMsgName)
  {
    _TDispID _dispid(/* GEMSetSpecificMessage */ DISPID(48));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = sMsgName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetSpecificMessage(long nObjectID, long* pnRObjectID, BSTR sMsgName)
  {
    _TDispID _dispid(/* GEMGetSpecificMessage */ DISPID(49));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnRObjectID /*[VT_I4:1]*/;
    _args[3] = sMsgName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetAllStringItem(long nObjectID, BSTR* psValue)
  {
    _TDispID _dispid(/* GetAllStringItem */ DISPID(50));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = psValue /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetAllStringItem(long nObjectID, BSTR sValue)
  {
    _TDispID _dispid(/* SetAllStringItem */ DISPID(51));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = sValue /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetVarName(long nCount, BSTR* psVidName, BSTR* psValue)
  {
    _TDispID _dispid(/* GEMSetVarName */ DISPID(52));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = psVidName /*[VT_BSTR:1]*/;
    _args[3] = psValue /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetVarName(long nCount, BSTR* psVidName, BSTR* psValue)
  {
    _TDispID _dispid(/* GEMGetVarName */ DISPID(53));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = psVidName /*[VT_BSTR:1]*/;
    _args[3] = psValue /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall CloseObject(long nObjectID)
  {
    _TDispID _dispid(/* CloseObject */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqAllECInfo()
  {
    _TDispID _dispid(/* GEMReqAllECInfo */ DISPID(55));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetBinary(long nObjectID, short* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetBinary */ DISPID(56));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetBool(long nObjectID, short* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetBool */ DISPID(57));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetU1(long nObjectID, short* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetU1 */ DISPID(58));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetU2(long nObjectID, long* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetU2 */ DISPID(59));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I4:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetU4(long nObjectID, double* prValue, long nItemCount)
  {
    _TDispID _dispid(/* SetU4 */ DISPID(60));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R8:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetU8(long nObjectID, double* prValue, long nItemCount)
  {
    _TDispID _dispid(/* SetU8 */ DISPID(61));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R8:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetI1(long nObjectID, short* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetI1 */ DISPID(62));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetI2(long nObjectID, short* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetI2 */ DISPID(63));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetI4(long nObjectID, long* plValue, long nItemCount)
  {
    _TDispID _dispid(/* SetI4 */ DISPID(64));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = plValue /*[VT_I4:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetI8(long nObjectID, long* plValue, long nItemCount)
  {
    _TDispID _dispid(/* SetI8 */ DISPID(65));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = plValue /*[VT_I4:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetF4(long nObjectID, float* prValue, long nItemCount)
  {
    _TDispID _dispid(/* SetF4 */ DISPID(66));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R4:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetF8(long nObjectID, double* prValue, long nItemCount)
  {
    _TDispID _dispid(/* SetF8 */ DISPID(67));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R8:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetAscii(long nObjectID, BSTR pszValue, long nItemCount)
  {
    _TDispID _dispid(/* SetAscii */ DISPID(68));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pszValue /*[VT_BSTR:0]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetBinary(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetBinary */ DISPID(69));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetBool(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetBool */ DISPID(70));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetU1(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetU1 */ DISPID(71));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetU2(long nObjectID, long* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetU2 */ DISPID(72));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I4:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetU4(long nObjectID, double* prValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetU4 */ DISPID(73));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R8:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetU8(long nObjectID, double* prValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetU8 */ DISPID(74));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R8:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetI1(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetI1 */ DISPID(75));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetI2(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetI2 */ DISPID(76));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetI4(long nObjectID, long* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetI4 */ DISPID(77));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I4:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetI8(long nObjectID, long* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetI8 */ DISPID(78));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I4:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetF4(long nObjectID, float* prValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetF4 */ DISPID(79));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R4:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetF8(long nObjectID, double* prValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetF8 */ DISPID(80));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = prValue /*[VT_R8:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetAscii(long nObjectID, BSTR* psValue, long* pnItemCount)
  {
    _TDispID _dispid(/* GetAscii */ DISPID(81));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = psValue /*[VT_BSTR:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPSendEx(BSTR sPpid, BSTR sRecipePath)
  {
    _TDispID _dispid(/* GEMReqPPSendEx */ DISPID(82));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sRecipePath /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
  {
    _TDispID _dispid(/* GEMRspPPEx */ DISPID(83));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sRecipePath /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath, long nResult)
  {
    _TDispID _dispid(/* GEMRspPPSendEx */ DISPID(84));
    TAutoArgs<4> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sRecipePath /*[VT_BSTR:0]*/;
    _args[4] = nResult /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPEx(BSTR sPpid, BSTR sRecipePath)
  {
    _TDispID _dispid(/* GEMReqPPEx */ DISPID(85));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sRecipePath /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall SetAsciiEx(long nObjectID, short* pnValue, long nItemCount)
  {
    _TDispID _dispid(/* SetAsciiEx */ DISPID(86));
    TAutoArgs<3> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = nItemCount /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GetAsciiEx(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
  {
    _TDispID _dispid(/* GetAsciiEx */ DISPID(87));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = pnValue /*[VT_I2:1]*/;
    _args[3] = pnItemCount /*[VT_I4:1]*/;
    _args[4] = nSize /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetVariableEx(long nObjectID, long nVid)
  {
    _TDispID _dispid(/* GEMSetVariableEx */ DISPID(88));
    TAutoArgs<2> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = nVid /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqLoopback(long nCount, long* pnAbs)
  {
    _TDispID _dispid(/* GEMReqLoopback */ DISPID(89));
    TAutoArgs<2> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnAbs /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetEventEnable(long nCount, long* pnCEIDs, long nEnable)
  {
    _TDispID _dispid(/* GEMSetEventEnable */ DISPID(90));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnCEIDs /*[VT_I4:1]*/;
    _args[3] = nEnable /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMSetAlarmEnable(long nCount, long* pnALIDs, long nEnable)
  {
    _TDispID _dispid(/* GEMSetAlarmEnable */ DISPID(91));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnALIDs /*[VT_I4:1]*/;
    _args[3] = nEnable /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetEventEnable(long nCount, long* pnCEIDs, long* pnEnable)
  {
    _TDispID _dispid(/* GEMGetEventEnable */ DISPID(92));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnCEIDs /*[VT_I4:1]*/;
    _args[3] = pnEnable /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetAlarmEnable(long nCount, long* pnALIDs, long* pnEnable)
  {
    _TDispID _dispid(/* GEMGetAlarmEnable */ DISPID(93));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnALIDs /*[VT_I4:1]*/;
    _args[3] = pnEnable /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetAlarmInfo(long nCount, long* pnALIDs, long* pnALCDs, BSTR* psALTXs)
  {
    _TDispID _dispid(/* GEMGetAlarmInfo */ DISPID(94));
    TAutoArgs<4> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnALIDs /*[VT_I4:1]*/;
    _args[3] = pnALCDs /*[VT_I4:1]*/;
    _args[4] = psALTXs /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetSVInfo(long nCount, long* pnSVIDs, BSTR* psMins, BSTR* psMaxs)
  {
    _TDispID _dispid(/* GEMGetSVInfo */ DISPID(95));
    TAutoArgs<4> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnSVIDs /*[VT_I4:1]*/;
    _args[3] = psMins /*[VT_BSTR:1]*/;
    _args[4] = psMaxs /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMGetECVInfo(long nCount, long* pnEcIds, BSTR* psNames, BSTR* psDefs, 
                                BSTR* psMins, BSTR* psMaxs, BSTR* psUnits)
  {
    _TDispID _dispid(/* GEMGetECVInfo */ DISPID(96));
    TAutoArgs<7> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnEcIds /*[VT_I4:1]*/;
    _args[3] = psNames /*[VT_BSTR:1]*/;
    _args[4] = psDefs /*[VT_BSTR:1]*/;
    _args[5] = psMins /*[VT_BSTR:1]*/;
    _args[6] = psMaxs /*[VT_BSTR:1]*/;
    _args[7] = psUnits /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspOffline(long nMsgId, long nAck)
  {
    _TDispID _dispid(/* GEMRspOffline */ DISPID(97));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nAck /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspOnline(long nMsgId, long nAck)
  {
    _TDispID _dispid(/* GEMRspOnline */ DISPID(98));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nAck /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqHostOffline()
  {
    _TDispID _dispid(/* GEMReqHostOffline */ DISPID(99));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqStartPolling(BSTR sName, long nScanTime)
  {
    _TDispID _dispid(/* GEMReqStartPolling */ DISPID(100));
    TAutoArgs<2> _args;
    _args[1] = sName /*[VT_BSTR:0]*/;
    _args[2] = nScanTime /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqStopPolling(BSTR sName)
  {
    _TDispID _dispid(/* GEMReqStopPolling */ DISPID(101));
    TAutoArgs<1> _args;
    _args[1] = sName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspRemoteCommand2(long nMsgId, BSTR sCmd, long nHCAck, long nCount, 
                                       BSTR* psCpName, long* pnCpAck)
  {
    _TDispID _dispid(/* GEMRspRemoteCommand2 */ DISPID(102));
    TAutoArgs<6> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sCmd /*[VT_BSTR:0]*/;
    _args[3] = nHCAck /*[VT_I4:0]*/;
    _args[4] = nCount /*[VT_I4:0]*/;
    _args[5] = psCpName /*[VT_BSTR:1]*/;
    _args[6] = pnCpAck /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMReqPPFmtSend2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode
                                   , long* pnParamCount, BSTR* psParamNames, BSTR* psParamValues)
  {
    _TDispID _dispid(/* GEMReqPPFmtSend2 */ DISPID(103));
    TAutoArgs<8> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sMdln /*[VT_BSTR:0]*/;
    _args[3] = sSoftRev /*[VT_BSTR:0]*/;
    _args[4] = nCount /*[VT_I4:0]*/;
    _args[5] = psCCode /*[VT_BSTR:1]*/;
    _args[6] = pnParamCount /*[VT_I4:1]*/;
    _args[7] = psParamNames /*[VT_BSTR:1]*/;
    _args[8] = psParamValues /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall GEMRspPPFmt2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                               BSTR* psCCode, long* pnParamCount, BSTR* psParamNames, 
                               BSTR* psParamValues)
  {
    _TDispID _dispid(/* GEMRspPPFmt2 */ DISPID(104));
    TAutoArgs<9> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sMdln /*[VT_BSTR:0]*/;
    _args[4] = sSoftRev /*[VT_BSTR:0]*/;
    _args[5] = nCount /*[VT_I4:0]*/;
    _args[6] = psCCode /*[VT_BSTR:1]*/;
    _args[7] = pnParamCount /*[VT_I4:1]*/;
    _args[8] = psParamNames /*[VT_BSTR:1]*/;
    _args[9] = psParamValues /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   BSTR            IP = {read = get_IP, write = set_IP};
  __property   long            Port = {read = get_Port, write = set_Port};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
};
// *********************************************************************//
// Interface: _DeXGemEvents
// Flags:     (4096) Dispatchable
// GUID:      {F0B2A415-B60D-4F3D-BDA6-D82551C59CFA}
// *********************************************************************//
interface _DeXGemEvents : public TDispWrapper<IDispatch>
{
  void __fastcall eSECSMessageReceived(long nObjectID, long nStream, long nFunction, long nSysbyte)
  {
    _TDispID _dispid(/* eSECSMessageReceived */ DISPID(1));
    TAutoArgs<4> _args;
    _args[1] = nObjectID /*[VT_I4:0]*/;
    _args[2] = nStream /*[VT_I4:0]*/;
    _args[3] = nFunction /*[VT_I4:0]*/;
    _args[4] = nSysbyte /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMCommStateChanged(long nState)
  {
    _TDispID _dispid(/* eGEMCommStateChanged */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = nState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMControlStateChanged(long nState)
  {
    _TDispID _dispid(/* eGEMControlStateChanged */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = nState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqChangeECV(long nMsgId, long nCount, long* pnEcIds, BSTR* psVals)
  {
    _TDispID _dispid(/* eGEMReqChangeECV */ DISPID(4));
    TAutoArgs<4> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nCount /*[VT_I4:0]*/;
    _args[3] = pnEcIds /*[VT_I4:1]*/;
    _args[4] = psVals /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMECVChanged(long nCount, long* pnEcIds, BSTR* psVals)
  {
    _TDispID _dispid(/* eGEMECVChanged */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnEcIds /*[VT_I4:1]*/;
    _args[3] = psVals /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqGetDateTime(long nMsgId)
  {
    _TDispID _dispid(/* eGEMReqGetDateTime */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspGetDateTime(BSTR sSystemTime)
  {
    _TDispID _dispid(/* eGEMRspGetDateTime */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = sSystemTime /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqDateTime(long nMsgId, BSTR sSystemTime)
  {
    _TDispID _dispid(/* eGEMReqDateTime */ DISPID(8));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sSystemTime /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMErrorEvent(long nErrorCode)
  {
    _TDispID _dispid(/* eGEMErrorEvent */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = nErrorCode /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqRemoteCommand(long nMsgId, BSTR sRcmd, long nCount, BSTR* psNames, 
                                       BSTR* psVals)
  {
    _TDispID _dispid(/* eGEMReqRemoteCommand */ DISPID(10));
    TAutoArgs<5> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sRcmd /*[VT_BSTR:0]*/;
    _args[3] = nCount /*[VT_I4:0]*/;
    _args[4] = psNames /*[VT_BSTR:1]*/;
    _args[5] = psVals /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPLoadInquire(long nMsgId, BSTR sPpid, long nLength)
  {
    _TDispID _dispid(/* eGEMReqPPLoadInquire */ DISPID(11));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = nLength /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPLoadInquire(BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* eGEMRspPPLoadInquire */ DISPID(12));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = nResult /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPSend(long nMsgId, BSTR sPpid, BSTR sBody)
  {
    _TDispID _dispid(/* eGEMReqPPSend */ DISPID(13));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sBody /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPSend(BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* eGEMRspPPSend */ DISPID(14));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = nResult /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPP(long nMsgId, BSTR sPpid)
  {
    _TDispID _dispid(/* eGEMReqPP */ DISPID(15));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPP(BSTR sPpid, BSTR sBody)
  {
    _TDispID _dispid(/* eGEMRspPP */ DISPID(16));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sBody /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPDelete(long nMsgId, long nCount, BSTR* psPpid)
  {
    _TDispID _dispid(/* eGEMReqPPDelete */ DISPID(17));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nCount /*[VT_I4:0]*/;
    _args[3] = psPpid /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPList(long nMsgId)
  {
    _TDispID _dispid(/* eGEMReqPPList */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPFmtSend(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                   BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
  {
    _TDispID _dispid(/* eGEMReqPPFmtSend */ DISPID(19));
    TAutoArgs<8> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sMdln /*[VT_BSTR:0]*/;
    _args[4] = sSoftRev /*[VT_BSTR:0]*/;
    _args[5] = nCount /*[VT_I4:0]*/;
    _args[6] = psCCode /*[VT_BSTR:1]*/;
    _args[7] = pnParamCount /*[VT_I4:1]*/;
    _args[8] = psParamNames /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPFmtSend(BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* eGEMRspPPFmtSend */ DISPID(20));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = nResult /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPFmt(long nMsgId, BSTR sPpid)
  {
    _TDispID _dispid(/* eGEMReqPPFmt */ DISPID(21));
    TAutoArgs<2> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPFmt(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode, 
                               long* pnParamCount, BSTR* psParamNames)
  {
    _TDispID _dispid(/* eGEMRspPPFmt */ DISPID(22));
    TAutoArgs<7> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sMdln /*[VT_BSTR:0]*/;
    _args[3] = sSoftRev /*[VT_BSTR:0]*/;
    _args[4] = nCount /*[VT_I4:0]*/;
    _args[5] = psCCode /*[VT_BSTR:1]*/;
    _args[6] = pnParamCount /*[VT_I4:1]*/;
    _args[7] = psParamNames /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPFmtVerification(BSTR sPpid, long nResult)
  {
    _TDispID _dispid(/* eGEMRspPPFmtVerification */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = nResult /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMTerminalMessage(long nTid, BSTR sMsg)
  {
    _TDispID _dispid(/* eGEMTerminalMessage */ DISPID(24));
    TAutoArgs<2> _args;
    _args[1] = nTid /*[VT_I4:0]*/;
    _args[2] = sMsg /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMTerminalMultiMessage(long nTid, long nCount, BSTR* psMsg)
  {
    _TDispID _dispid(/* eGEMTerminalMultiMessage */ DISPID(25));
    TAutoArgs<3> _args;
    _args[1] = nTid /*[VT_I4:0]*/;
    _args[2] = nCount /*[VT_I4:0]*/;
    _args[3] = psMsg /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMSpoolStateChanged(long nState, long nLoadState, long nUnloadState, 
                                        BSTR sFullTime, long nMaxTransmit, long nMsgNum, 
                                        long nTotalNum, long nTransmitFail)
  {
    _TDispID _dispid(/* eGEMSpoolStateChanged */ DISPID(26));
    TAutoArgs<8> _args;
    _args[1] = nState /*[VT_I4:0]*/;
    _args[2] = nLoadState /*[VT_I4:0]*/;
    _args[3] = nUnloadState /*[VT_I4:0]*/;
    _args[4] = sFullTime /*[VT_BSTR:0]*/;
    _args[5] = nMaxTransmit /*[VT_I4:0]*/;
    _args[6] = nMsgNum /*[VT_I4:0]*/;
    _args[7] = nTotalNum /*[VT_I4:0]*/;
    _args[8] = nTransmitFail /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eXGEMStateEvent(long nState)
  {
    _TDispID _dispid(/* eXGEMStateEvent */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = nState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspAllECInfo(long lCount, long* plVid, BSTR* psName, BSTR* psValue, 
                                   BSTR* psDefault, BSTR* psMin, BSTR* psMax, BSTR* psUnit)
  {
    _TDispID _dispid(/* eGEMRspAllECInfo */ DISPID(28));
    TAutoArgs<8> _args;
    _args[1] = lCount /*[VT_I4:0]*/;
    _args[2] = plVid /*[VT_I4:1]*/;
    _args[3] = psName /*[VT_BSTR:1]*/;
    _args[4] = psValue /*[VT_BSTR:1]*/;
    _args[5] = psDefault /*[VT_BSTR:1]*/;
    _args[6] = psMin /*[VT_BSTR:1]*/;
    _args[7] = psMax /*[VT_BSTR:1]*/;
    _args[8] = psUnit /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
  {
    _TDispID _dispid(/* eGEMReqPPSendEx */ DISPID(29));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sRecipePath /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPEx(BSTR sPpid, BSTR sRecipePath)
  {
    _TDispID _dispid(/* eGEMRspPPEx */ DISPID(30));
    TAutoArgs<2> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sRecipePath /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
  {
    _TDispID _dispid(/* eGEMReqPPEx */ DISPID(31));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sRecipePath /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPSendEx(BSTR sPpid, BSTR sRecipePath, long nResult)
  {
    _TDispID _dispid(/* eGEMRspPPSendEx */ DISPID(32));
    TAutoArgs<3> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sRecipePath /*[VT_BSTR:0]*/;
    _args[3] = nResult /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReportedEvent(long nEventID)
  {
    _TDispID _dispid(/* eGEMReportedEvent */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = nEventID /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspLoopback(long nCount, long* pnAbs)
  {
    _TDispID _dispid(/* eGEMRspLoopback */ DISPID(34));
    TAutoArgs<2> _args;
    _args[1] = nCount /*[VT_I4:0]*/;
    _args[2] = pnAbs /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqOffline(long nMsgId, long nFromState, long nToState)
  {
    _TDispID _dispid(/* eGEMReqOffline */ DISPID(35));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nFromState /*[VT_I4:0]*/;
    _args[3] = nToState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqOnline(long nMsgId, long nFromState, long nToState)
  {
    _TDispID _dispid(/* eGEMReqOnline */ DISPID(36));
    TAutoArgs<3> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = nFromState /*[VT_I4:0]*/;
    _args[3] = nToState /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMNotifyPerformanceWarning(long nLevel)
  {
    _TDispID _dispid(/* eGEMNotifyPerformanceWarning */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = nLevel /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMSecondaryMsgReceived(long nS, long nF, long nSysbyte, BSTR sParam1, 
                                           BSTR sParam2, BSTR sParam3)
  {
    _TDispID _dispid(/* eGEMSecondaryMsgReceived */ DISPID(38));
    TAutoArgs<6> _args;
    _args[1] = nS /*[VT_I4:0]*/;
    _args[2] = nF /*[VT_I4:0]*/;
    _args[3] = nSysbyte /*[VT_I4:0]*/;
    _args[4] = sParam1 /*[VT_BSTR:0]*/;
    _args[5] = sParam2 /*[VT_BSTR:0]*/;
    _args[6] = sParam3 /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReqPPFmtSend2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount
                                    , BSTR* psCCoode, long* pnParamCount, BSTR* psParamNames, 
                                    BSTR* psParamValues)
  {
    _TDispID _dispid(/* eGEMReqPPFmtSend2 */ DISPID(39));
    TAutoArgs<9> _args;
    _args[1] = nMsgId /*[VT_I4:0]*/;
    _args[2] = sPpid /*[VT_BSTR:0]*/;
    _args[3] = sMdln /*[VT_BSTR:0]*/;
    _args[4] = sSoftRev /*[VT_BSTR:0]*/;
    _args[5] = nCount /*[VT_I4:0]*/;
    _args[6] = psCCoode /*[VT_BSTR:1]*/;
    _args[7] = pnParamCount /*[VT_I4:1]*/;
    _args[8] = psParamNames /*[VT_BSTR:1]*/;
    _args[9] = psParamValues /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMRspPPFmt2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode, 
                                long* pnParamCount, BSTR* psParamNames, BSTR* psParamValues)
  {
    _TDispID _dispid(/* eGEMRspPPFmt2 */ DISPID(40));
    TAutoArgs<8> _args;
    _args[1] = sPpid /*[VT_BSTR:0]*/;
    _args[2] = sMdln /*[VT_BSTR:0]*/;
    _args[3] = sSoftRev /*[VT_BSTR:0]*/;
    _args[4] = nCount /*[VT_I4:0]*/;
    _args[5] = psCCode /*[VT_BSTR:1]*/;
    _args[6] = pnParamCount /*[VT_I4:1]*/;
    _args[7] = psParamNames /*[VT_BSTR:1]*/;
    _args[8] = psParamValues /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall eGEMReportedEvent2(long nEventID, long nSysbyte)
  {
    _TDispID _dispid(/* eGEMReportedEvent2 */ DISPID(41));
    TAutoArgs<2> _args;
    _args[1] = nEventID /*[VT_I4:0]*/;
    _args[2] = nSysbyte /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DeXGem
// Flags:     (4096) Dispatchable
// GUID:      {6F88E29E-8982-49D6-9ACC-CBD4952D6D3B}
// *********************************************************************//
template<class T>
class _DeXGemDispT : public TAutoDriver<_DeXGem>
{
public:
  _DeXGemDispT(){}

  _DeXGemDispT(_DeXGem *pintf)
  {
    TAutoDriver<_DeXGem>::Bind(pintf, false);
  }

  _DeXGemDispT(_DeXGemPtr pintf)
  {
    TAutoDriver<_DeXGem>::Bind(pintf, true);
  }

  _DeXGemDispT& operator=(_DeXGem *pintf)
  {
    TAutoDriver<_DeXGem>::Bind(pintf, false);
    return *this;
  }

  _DeXGemDispT& operator=(_DeXGemPtr pintf)
  {
    TAutoDriver<_DeXGem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_eXGem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_eXGem);
  }

  void            __fastcall set_IP(BSTR Value);
  BSTR            __fastcall get_IP();
  void            __fastcall set_Port(long Value);
  long            __fastcall get_Port();
  void            __fastcall set_Active(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Active();
  void            __fastcall AboutBox();
  long            __fastcall Initialize(BSTR sCfg);
  long            __fastcall Start();
  long            __fastcall Stop();
  long            __fastcall Close();
  long            __fastcall MakeObject(long* pnObjectID);
  long            __fastcall SetList(long nObjectID, long nItemCount);
  long            __fastcall GetList(long nObjectID, long* pnItemCount);
  long            __fastcall GEMSetVariables(long nObjectID, long nVid);
  long            __fastcall SendSECSMessage(long nObjectID, long nStream, long nFunction, 
                                             long nSysbyte);
  long            __fastcall GEMReqOffline();
  long            __fastcall GEMReqLocal();
  long            __fastcall GEMReqRemote();
  long            __fastcall GEMSetEstablish(long bState);
  long            __fastcall GEMSetParam(BSTR sParamName, BSTR sParamValue);
  long            __fastcall GEMGetParam(BSTR sParamName, BSTR* psParamValue);
  long            __fastcall GEMEQInitialized(long nInitType);
  long            __fastcall GEMReqGetDateTime();
  long            __fastcall GEMRspGetDateTime(long nMsgId, BSTR sSystemTime);
  long            __fastcall GEMRspDateTime(long nMsgId, long nResult);
  long            __fastcall GEMSetAlarm(long nID, long nState);
  long            __fastcall GEMRspRemoteCommand(long nMsgId, BSTR sCmd, long nHCAck, long nCount, 
                                                 long* pnResult);
  long            __fastcall GEMRspChangeECV(long nMsgId, long nResult);
  long            __fastcall GEMSetECVChanged(long nCount, long* pnEcIds, BSTR* psEcVals);
  long            __fastcall GEMSetPPChanged(long nMode, BSTR sPpid, long nSize, BSTR sBody);
  long            __fastcall GEMSetPPFmtChanged(long nMode, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                                long nCount, BSTR* psCCode, long* pnParamCount, 
                                                BSTR* psParamNames);
  long            __fastcall GEMReqPPLoadInquire(BSTR sPpid, long nLength);
  long            __fastcall GEMRspPPLoadInquire(long nMsgId, BSTR sPpid, long nResult);
  long            __fastcall GEMReqPPSend(BSTR sPpid, BSTR sBody);
  long            __fastcall GEMRspPPSend(long nMsgId, BSTR sPpid, long nResult);
  long            __fastcall GEMReqPP(BSTR sPpid);
  long            __fastcall GEMRspPP(long nMsgId, BSTR sPpid, BSTR sBody);
  long            __fastcall GEMRspPPDelete(long nMsgId, long nCount, BSTR* psPpids, long nResult);
  long            __fastcall GEMRspPPList(long nMsgId, long nCount, BSTR* psPpids);
  long            __fastcall GEMReqPPFmtSend(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                             BSTR* psCCode, long* pnParamCount, BSTR* psParamNames);
  long            __fastcall GEMRspPPFmtSend(long nMsgId, BSTR sPpid, long nResult);
  long            __fastcall GEMReqPPFmt(BSTR sPpid);
  long            __fastcall GEMRspPPFmt(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                         long nCount, BSTR* psCCode, long* pnParamCount, 
                                         BSTR* psParamNames);
  long            __fastcall GEMReqPPFmtVerification(BSTR sPpid, long nCount, long* pnAck, 
                                                     BSTR* psSeqNumber, BSTR* psError);
  long            __fastcall GEMSetTerminalMessage(long nTid, BSTR sMsg);
  long            __fastcall GEMSetVariable(long nCount, long* pnVid, BSTR* psValue);
  long            __fastcall GEMEnableLog(long bEnabled);
  long            __fastcall GEMSetLogOption(BSTR sDriectory, BSTR sPrefix, BSTR sExtension, 
                                             long nKeepDay, long bMakeDailyLog, 
                                             long bMakeSubDirectory);
  long            __fastcall GEMSetEvent(long nEventID);
  long            __fastcall GEMGetVariable(long nCount, long* pnVid, BSTR* psValue);
  long            __fastcall GEMSetSpecificMessage(long nObjectID, BSTR sMsgName);
  long            __fastcall GEMGetSpecificMessage(long nObjectID, long* pnRObjectID, BSTR sMsgName);
  long            __fastcall GetAllStringItem(long nObjectID, BSTR* psValue);
  long            __fastcall SetAllStringItem(long nObjectID, BSTR sValue);
  long            __fastcall GEMSetVarName(long nCount, BSTR* psVidName, BSTR* psValue);
  long            __fastcall GEMGetVarName(long nCount, BSTR* psVidName, BSTR* psValue);
  long            __fastcall CloseObject(long nObjectID);
  long            __fastcall GEMReqAllECInfo();
  long            __fastcall SetBinary(long nObjectID, short* pnValue, long nItemCount);
  long            __fastcall SetBool(long nObjectID, short* pnValue, long nItemCount);
  long            __fastcall SetU1(long nObjectID, short* pnValue, long nItemCount);
  long            __fastcall SetU2(long nObjectID, long* pnValue, long nItemCount);
  long            __fastcall SetU4(long nObjectID, double* prValue, long nItemCount);
  long            __fastcall SetU8(long nObjectID, double* prValue, long nItemCount);
  long            __fastcall SetI1(long nObjectID, short* pnValue, long nItemCount);
  long            __fastcall SetI2(long nObjectID, short* pnValue, long nItemCount);
  long            __fastcall SetI4(long nObjectID, long* plValue, long nItemCount);
  long            __fastcall SetI8(long nObjectID, long* plValue, long nItemCount);
  long            __fastcall SetF4(long nObjectID, float* prValue, long nItemCount);
  long            __fastcall SetF8(long nObjectID, double* prValue, long nItemCount);
  long            __fastcall SetAscii(long nObjectID, BSTR pszValue, long nItemCount);
  long            __fastcall GetBinary(long nObjectID, short* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetBool(long nObjectID, short* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetU1(long nObjectID, short* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetU2(long nObjectID, long* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetU4(long nObjectID, double* prValue, long* pnItemCount, long nSize);
  long            __fastcall GetU8(long nObjectID, double* prValue, long* pnItemCount, long nSize);
  long            __fastcall GetI1(long nObjectID, short* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetI2(long nObjectID, short* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetI4(long nObjectID, long* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetI8(long nObjectID, long* pnValue, long* pnItemCount, long nSize);
  long            __fastcall GetF4(long nObjectID, float* prValue, long* pnItemCount, long nSize);
  long            __fastcall GetF8(long nObjectID, double* prValue, long* pnItemCount, long nSize);
  long            __fastcall GetAscii(long nObjectID, BSTR* psValue, long* pnItemCount);
  long            __fastcall GEMReqPPSendEx(BSTR sPpid, BSTR sRecipePath);
  long            __fastcall GEMRspPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath);
  long            __fastcall GEMRspPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath, long nResult);
  long            __fastcall GEMReqPPEx(BSTR sPpid, BSTR sRecipePath);
  long            __fastcall SetAsciiEx(long nObjectID, short* pnValue, long nItemCount);
  long            __fastcall GetAsciiEx(long nObjectID, short* pnValue, long* pnItemCount, 
                                        long nSize);
  long            __fastcall GEMSetVariableEx(long nObjectID, long nVid);
  long            __fastcall GEMReqLoopback(long nCount, long* pnAbs);
  long            __fastcall GEMSetEventEnable(long nCount, long* pnCEIDs, long nEnable);
  long            __fastcall GEMSetAlarmEnable(long nCount, long* pnALIDs, long nEnable);
  long            __fastcall GEMGetEventEnable(long nCount, long* pnCEIDs, long* pnEnable);
  long            __fastcall GEMGetAlarmEnable(long nCount, long* pnALIDs, long* pnEnable);
  long            __fastcall GEMGetAlarmInfo(long nCount, long* pnALIDs, long* pnALCDs, 
                                             BSTR* psALTXs);
  long            __fastcall GEMGetSVInfo(long nCount, long* pnSVIDs, BSTR* psMins, BSTR* psMaxs);
  long            __fastcall GEMGetECVInfo(long nCount, long* pnEcIds, BSTR* psNames, BSTR* psDefs, 
                                           BSTR* psMins, BSTR* psMaxs, BSTR* psUnits);
  long            __fastcall GEMRspOffline(long nMsgId, long nAck);
  long            __fastcall GEMRspOnline(long nMsgId, long nAck);
  long            __fastcall GEMReqHostOffline();
  long            __fastcall GEMReqStartPolling(BSTR sName, long nScanTime);
  long            __fastcall GEMReqStopPolling(BSTR sName);
  long            __fastcall GEMRspRemoteCommand2(long nMsgId, BSTR sCmd, long nHCAck, long nCount, 
                                                  BSTR* psCpName, long* pnCpAck);
  long            __fastcall GEMReqPPFmtSend2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                              BSTR* psCCode, long* pnParamCount, BSTR* psParamNames
                                              , BSTR* psParamValues);
  long            __fastcall GEMRspPPFmt2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                          long nCount, BSTR* psCCode, long* pnParamCount, 
                                          BSTR* psParamNames, BSTR* psParamValues);

  __property   BSTR            IP = {read = get_IP, write = set_IP};
  __property   long            Port = {read = get_Port, write = set_Port};
  __property   VARIANT_BOOL    Active = {read = get_Active, write = set_Active};
};
typedef _DeXGemDispT<_DeXGem> _DeXGemDisp;

// *********************************************************************//
// DispIntf:  _DeXGemEvents
// Flags:     (4096) Dispatchable
// GUID:      {F0B2A415-B60D-4F3D-BDA6-D82551C59CFA}
// *********************************************************************//
template <class T>
class _DeXGemEventsDispT : public TAutoDriver<_DeXGemEvents>
{
public:
  _DeXGemEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall eSECSMessageReceived(long nObjectID, long nStream, long nFunction, 
                                                  long nSysbyte);
  void            __fastcall eGEMCommStateChanged(long nState);
  void            __fastcall eGEMControlStateChanged(long nState);
  void            __fastcall eGEMReqChangeECV(long nMsgId, long nCount, long* pnEcIds, BSTR* psVals);
  void            __fastcall eGEMECVChanged(long nCount, long* pnEcIds, BSTR* psVals);
  void            __fastcall eGEMReqGetDateTime(long nMsgId);
  void            __fastcall eGEMRspGetDateTime(BSTR sSystemTime);
  void            __fastcall eGEMReqDateTime(long nMsgId, BSTR sSystemTime);
  void            __fastcall eGEMErrorEvent(long nErrorCode);
  void            __fastcall eGEMReqRemoteCommand(long nMsgId, BSTR sRcmd, long nCount, 
                                                  BSTR* psNames, BSTR* psVals);
  void            __fastcall eGEMReqPPLoadInquire(long nMsgId, BSTR sPpid, long nLength);
  void            __fastcall eGEMRspPPLoadInquire(BSTR sPpid, long nResult);
  void            __fastcall eGEMReqPPSend(long nMsgId, BSTR sPpid, BSTR sBody);
  void            __fastcall eGEMRspPPSend(BSTR sPpid, long nResult);
  void            __fastcall eGEMReqPP(long nMsgId, BSTR sPpid);
  void            __fastcall eGEMRspPP(BSTR sPpid, BSTR sBody);
  void            __fastcall eGEMReqPPDelete(long nMsgId, long nCount, BSTR* psPpid);
  void            __fastcall eGEMReqPPList(long nMsgId);
  void            __fastcall eGEMReqPPFmtSend(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                              long nCount, BSTR* psCCode, long* pnParamCount, 
                                              BSTR* psParamNames);
  void            __fastcall eGEMRspPPFmtSend(BSTR sPpid, long nResult);
  void            __fastcall eGEMReqPPFmt(long nMsgId, BSTR sPpid);
  void            __fastcall eGEMRspPPFmt(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                          BSTR* psCCode, long* pnParamCount, BSTR* psParamNames);
  void            __fastcall eGEMRspPPFmtVerification(BSTR sPpid, long nResult);
  void            __fastcall eGEMTerminalMessage(long nTid, BSTR sMsg);
  void            __fastcall eGEMTerminalMultiMessage(long nTid, long nCount, BSTR* psMsg);
  void            __fastcall eGEMSpoolStateChanged(long nState, long nLoadState, long nUnloadState, 
                                                   BSTR sFullTime, long nMaxTransmit, long nMsgNum, 
                                                   long nTotalNum, long nTransmitFail);
  void            __fastcall eXGEMStateEvent(long nState);
  void            __fastcall eGEMRspAllECInfo(long lCount, long* plVid, BSTR* psName, BSTR* psValue
                                              , BSTR* psDefault, BSTR* psMin, BSTR* psMax, 
                                              BSTR* psUnit);
  void            __fastcall eGEMReqPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath);
  void            __fastcall eGEMRspPPEx(BSTR sPpid, BSTR sRecipePath);
  void            __fastcall eGEMReqPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath);
  void            __fastcall eGEMRspPPSendEx(BSTR sPpid, BSTR sRecipePath, long nResult);
  void            __fastcall eGEMReportedEvent(long nEventID);
  void            __fastcall eGEMRspLoopback(long nCount, long* pnAbs);
  void            __fastcall eGEMReqOffline(long nMsgId, long nFromState, long nToState);
  void            __fastcall eGEMReqOnline(long nMsgId, long nFromState, long nToState);
  void            __fastcall eGEMNotifyPerformanceWarning(long nLevel);
  void            __fastcall eGEMSecondaryMsgReceived(long nS, long nF, long nSysbyte, BSTR sParam1
                                                      , BSTR sParam2, BSTR sParam3);
  void            __fastcall eGEMReqPPFmtSend2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                               long nCount, BSTR* psCCoode, long* pnParamCount, 
                                               BSTR* psParamNames, BSTR* psParamValues);
  void            __fastcall eGEMRspPPFmt2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                           BSTR* psCCode, long* pnParamCount, BSTR* psParamNames, 
                                           BSTR* psParamValues);
  void            __fastcall eGEMReportedEvent2(long nEventID, long nSysbyte);

};
typedef _DeXGemEventsDispT<_DeXGemEvents> _DeXGemEventsDisp;

// *********************************************************************//
// DispIntf:  _DeXGem
// Flags:     (4096) Dispatchable
// GUID:      {6F88E29E-8982-49D6-9ACC-CBD4952D6D3B}
// *********************************************************************//
template <class T> void __fastcall
_DeXGemDispT<T>::set_IP(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("IP"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DeXGemDispT<T>::get_IP()
{
  _TDispID _dispid(*this, OLETEXT("IP"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DeXGemDispT<T>::set_Port(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Port"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DeXGemDispT<T>::get_Port()
{
  _TDispID _dispid(*this, OLETEXT("Port"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DeXGemDispT<T>::set_Active(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DeXGemDispT<T>::get_Active()
{
  _TDispID _dispid(*this, OLETEXT("Active"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DeXGemDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  OleProcedure(_dispid);
}

template <class T> long __fastcall
_DeXGemDispT<T>::Initialize(BSTR sCfg)
{
  _TDispID _dispid(*this, OLETEXT("Initialize"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = sCfg /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::Start()
{
  _TDispID _dispid(*this, OLETEXT("Start"), DISPID(5));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::Stop()
{
  _TDispID _dispid(*this, OLETEXT("Stop"), DISPID(6));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(7));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::MakeObject(long* pnObjectID)
{
  _TDispID _dispid(*this, OLETEXT("MakeObject"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pnObjectID /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetList(long nObjectID, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetList"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetList(long nObjectID, long* pnItemCount)
{
  _TDispID _dispid(*this, OLETEXT("GetList"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnItemCount /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetVariables(long nObjectID, long nVid)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetVariables"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = nVid /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SendSECSMessage(long nObjectID, long nStream, long nFunction, long nSysbyte)
{
  _TDispID _dispid(*this, OLETEXT("SendSECSMessage"), DISPID(12));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = nStream /*[VT_I4:0]*/;
  _args[3] = nFunction /*[VT_I4:0]*/;
  _args[4] = nSysbyte /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqOffline()
{
  _TDispID _dispid(*this, OLETEXT("GEMReqOffline"), DISPID(13));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqLocal()
{
  _TDispID _dispid(*this, OLETEXT("GEMReqLocal"), DISPID(14));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqRemote()
{
  _TDispID _dispid(*this, OLETEXT("GEMReqRemote"), DISPID(15));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetEstablish(long bState)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetEstablish"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bState /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetParam(BSTR sParamName, BSTR sParamValue)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetParam"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = sParamName /*[VT_BSTR:0]*/;
  _args[2] = sParamValue /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetParam(BSTR sParamName, BSTR* psParamValue)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetParam"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = sParamName /*[VT_BSTR:0]*/;
  _args[2] = psParamValue /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMEQInitialized(long nInitType)
{
  _TDispID _dispid(*this, OLETEXT("GEMEQInitialized"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = nInitType /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqGetDateTime()
{
  _TDispID _dispid(*this, OLETEXT("GEMReqGetDateTime"), DISPID(20));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspGetDateTime(long nMsgId, BSTR sSystemTime)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspGetDateTime"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sSystemTime /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspDateTime(long nMsgId, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspDateTime"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetAlarm(long nID, long nState)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetAlarm"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = nID /*[VT_I4:0]*/;
  _args[2] = nState /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspRemoteCommand(long nMsgId, BSTR sCmd, long nHCAck, long nCount, 
                                     long* pnResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspRemoteCommand"), DISPID(24));
  TAutoArgs<5> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sCmd /*[VT_BSTR:0]*/;
  _args[3] = nHCAck /*[VT_I4:0]*/;
  _args[4] = nCount /*[VT_I4:0]*/;
  _args[5] = pnResult /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspChangeECV(long nMsgId, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspChangeECV"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetECVChanged(long nCount, long* pnEcIds, BSTR* psEcVals)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetECVChanged"), DISPID(26));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnEcIds /*[VT_I4:1]*/;
  _args[3] = psEcVals /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetPPChanged(long nMode, BSTR sPpid, long nSize, BSTR sBody)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetPPChanged"), DISPID(27));
  TAutoArgs<4> _args;
  _args[1] = nMode /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = nSize /*[VT_I4:0]*/;
  _args[4] = sBody /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetPPFmtChanged(long nMode, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                    BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetPPFmtChanged"), DISPID(28));
  TAutoArgs<8> _args;
  _args[1] = nMode /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sMdln /*[VT_BSTR:0]*/;
  _args[4] = sSoftRev /*[VT_BSTR:0]*/;
  _args[5] = nCount /*[VT_I4:0]*/;
  _args[6] = psCCode /*[VT_BSTR:1]*/;
  _args[7] = pnParamCount /*[VT_I4:1]*/;
  _args[8] = psParamNames /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPLoadInquire(BSTR sPpid, long nLength)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPLoadInquire"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = nLength /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPLoadInquire(long nMsgId, BSTR sPpid, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPLoadInquire"), DISPID(30));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPSend(BSTR sPpid, BSTR sBody)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPSend"), DISPID(31));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sBody /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPSend(long nMsgId, BSTR sPpid, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPSend"), DISPID(32));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPP(BSTR sPpid)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPP"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPP(long nMsgId, BSTR sPpid, BSTR sBody)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPP"), DISPID(34));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sBody /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPDelete(long nMsgId, long nCount, BSTR* psPpids, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPDelete"), DISPID(35));
  TAutoArgs<4> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nCount /*[VT_I4:0]*/;
  _args[3] = psPpids /*[VT_BSTR:1]*/;
  _args[4] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPList(long nMsgId, long nCount, BSTR* psPpids)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPList"), DISPID(36));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nCount /*[VT_I4:0]*/;
  _args[3] = psPpids /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPFmtSend(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode, 
                                 long* pnParamCount, BSTR* psParamNames)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPFmtSend"), DISPID(37));
  TAutoArgs<7> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sMdln /*[VT_BSTR:0]*/;
  _args[3] = sSoftRev /*[VT_BSTR:0]*/;
  _args[4] = nCount /*[VT_I4:0]*/;
  _args[5] = psCCode /*[VT_BSTR:1]*/;
  _args[6] = pnParamCount /*[VT_I4:1]*/;
  _args[7] = psParamNames /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPFmtSend(long nMsgId, BSTR sPpid, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPFmtSend"), DISPID(38));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPFmt(BSTR sPpid)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPFmt"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPFmt(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                             BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPFmt"), DISPID(40));
  TAutoArgs<8> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sMdln /*[VT_BSTR:0]*/;
  _args[4] = sSoftRev /*[VT_BSTR:0]*/;
  _args[5] = nCount /*[VT_I4:0]*/;
  _args[6] = psCCode /*[VT_BSTR:1]*/;
  _args[7] = pnParamCount /*[VT_I4:1]*/;
  _args[8] = psParamNames /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPFmtVerification(BSTR sPpid, long nCount, long* pnAck, BSTR* psSeqNumber, 
                                         BSTR* psError)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPFmtVerification"), DISPID(41));
  TAutoArgs<5> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = nCount /*[VT_I4:0]*/;
  _args[3] = pnAck /*[VT_I4:1]*/;
  _args[4] = psSeqNumber /*[VT_BSTR:1]*/;
  _args[5] = psError /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetTerminalMessage(long nTid, BSTR sMsg)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetTerminalMessage"), DISPID(42));
  TAutoArgs<2> _args;
  _args[1] = nTid /*[VT_I4:0]*/;
  _args[2] = sMsg /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetVariable(long nCount, long* pnVid, BSTR* psValue)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetVariable"), DISPID(43));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnVid /*[VT_I4:1]*/;
  _args[3] = psValue /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMEnableLog(long bEnabled)
{
  _TDispID _dispid(*this, OLETEXT("GEMEnableLog"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = bEnabled /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetLogOption(BSTR sDriectory, BSTR sPrefix, BSTR sExtension, long nKeepDay, 
                                 long bMakeDailyLog, long bMakeSubDirectory)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetLogOption"), DISPID(45));
  TAutoArgs<6> _args;
  _args[1] = sDriectory /*[VT_BSTR:0]*/;
  _args[2] = sPrefix /*[VT_BSTR:0]*/;
  _args[3] = sExtension /*[VT_BSTR:0]*/;
  _args[4] = nKeepDay /*[VT_I4:0]*/;
  _args[5] = bMakeDailyLog /*[VT_I4:0]*/;
  _args[6] = bMakeSubDirectory /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetEvent(long nEventID)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetEvent"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = nEventID /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetVariable(long nCount, long* pnVid, BSTR* psValue)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetVariable"), DISPID(47));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnVid /*[VT_I4:1]*/;
  _args[3] = psValue /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetSpecificMessage(long nObjectID, BSTR sMsgName)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetSpecificMessage"), DISPID(48));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = sMsgName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetSpecificMessage(long nObjectID, long* pnRObjectID, BSTR sMsgName)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetSpecificMessage"), DISPID(49));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnRObjectID /*[VT_I4:1]*/;
  _args[3] = sMsgName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetAllStringItem(long nObjectID, BSTR* psValue)
{
  _TDispID _dispid(*this, OLETEXT("GetAllStringItem"), DISPID(50));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = psValue /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetAllStringItem(long nObjectID, BSTR sValue)
{
  _TDispID _dispid(*this, OLETEXT("SetAllStringItem"), DISPID(51));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = sValue /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetVarName(long nCount, BSTR* psVidName, BSTR* psValue)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetVarName"), DISPID(52));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = psVidName /*[VT_BSTR:1]*/;
  _args[3] = psValue /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetVarName(long nCount, BSTR* psVidName, BSTR* psValue)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetVarName"), DISPID(53));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = psVidName /*[VT_BSTR:1]*/;
  _args[3] = psValue /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::CloseObject(long nObjectID)
{
  _TDispID _dispid(*this, OLETEXT("CloseObject"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqAllECInfo()
{
  _TDispID _dispid(*this, OLETEXT("GEMReqAllECInfo"), DISPID(55));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetBinary(long nObjectID, short* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetBinary"), DISPID(56));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetBool(long nObjectID, short* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetBool"), DISPID(57));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetU1(long nObjectID, short* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetU1"), DISPID(58));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetU2(long nObjectID, long* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetU2"), DISPID(59));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I4:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetU4(long nObjectID, double* prValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetU4"), DISPID(60));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R8:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetU8(long nObjectID, double* prValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetU8"), DISPID(61));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R8:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetI1(long nObjectID, short* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetI1"), DISPID(62));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetI2(long nObjectID, short* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetI2"), DISPID(63));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetI4(long nObjectID, long* plValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetI4"), DISPID(64));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = plValue /*[VT_I4:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetI8(long nObjectID, long* plValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetI8"), DISPID(65));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = plValue /*[VT_I4:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetF4(long nObjectID, float* prValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetF4"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R4:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetF8(long nObjectID, double* prValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetF8"), DISPID(67));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R8:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetAscii(long nObjectID, BSTR pszValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetAscii"), DISPID(68));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetBinary(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetBinary"), DISPID(69));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetBool(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetBool"), DISPID(70));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetU1(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetU1"), DISPID(71));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetU2(long nObjectID, long* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetU2"), DISPID(72));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I4:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetU4(long nObjectID, double* prValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetU4"), DISPID(73));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R8:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetU8(long nObjectID, double* prValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetU8"), DISPID(74));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R8:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetI1(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetI1"), DISPID(75));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetI2(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetI2"), DISPID(76));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetI4(long nObjectID, long* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetI4"), DISPID(77));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I4:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetI8(long nObjectID, long* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetI8"), DISPID(78));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I4:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetF4(long nObjectID, float* prValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetF4"), DISPID(79));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R4:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetF8(long nObjectID, double* prValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetF8"), DISPID(80));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = prValue /*[VT_R8:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetAscii(long nObjectID, BSTR* psValue, long* pnItemCount)
{
  _TDispID _dispid(*this, OLETEXT("GetAscii"), DISPID(81));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = psValue /*[VT_BSTR:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPSendEx(BSTR sPpid, BSTR sRecipePath)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPSendEx"), DISPID(82));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sRecipePath /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPEx"), DISPID(83));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sRecipePath /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath, long nResult)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPSendEx"), DISPID(84));
  TAutoArgs<4> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sRecipePath /*[VT_BSTR:0]*/;
  _args[4] = nResult /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPEx(BSTR sPpid, BSTR sRecipePath)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPEx"), DISPID(85));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sRecipePath /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::SetAsciiEx(long nObjectID, short* pnValue, long nItemCount)
{
  _TDispID _dispid(*this, OLETEXT("SetAsciiEx"), DISPID(86));
  TAutoArgs<3> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = nItemCount /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GetAsciiEx(long nObjectID, short* pnValue, long* pnItemCount, long nSize)
{
  _TDispID _dispid(*this, OLETEXT("GetAsciiEx"), DISPID(87));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = pnValue /*[VT_I2:1]*/;
  _args[3] = pnItemCount /*[VT_I4:1]*/;
  _args[4] = nSize /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetVariableEx(long nObjectID, long nVid)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetVariableEx"), DISPID(88));
  TAutoArgs<2> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = nVid /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqLoopback(long nCount, long* pnAbs)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqLoopback"), DISPID(89));
  TAutoArgs<2> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnAbs /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetEventEnable(long nCount, long* pnCEIDs, long nEnable)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetEventEnable"), DISPID(90));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnCEIDs /*[VT_I4:1]*/;
  _args[3] = nEnable /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMSetAlarmEnable(long nCount, long* pnALIDs, long nEnable)
{
  _TDispID _dispid(*this, OLETEXT("GEMSetAlarmEnable"), DISPID(91));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnALIDs /*[VT_I4:1]*/;
  _args[3] = nEnable /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetEventEnable(long nCount, long* pnCEIDs, long* pnEnable)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetEventEnable"), DISPID(92));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnCEIDs /*[VT_I4:1]*/;
  _args[3] = pnEnable /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetAlarmEnable(long nCount, long* pnALIDs, long* pnEnable)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetAlarmEnable"), DISPID(93));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnALIDs /*[VT_I4:1]*/;
  _args[3] = pnEnable /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetAlarmInfo(long nCount, long* pnALIDs, long* pnALCDs, BSTR* psALTXs)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetAlarmInfo"), DISPID(94));
  TAutoArgs<4> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnALIDs /*[VT_I4:1]*/;
  _args[3] = pnALCDs /*[VT_I4:1]*/;
  _args[4] = psALTXs /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetSVInfo(long nCount, long* pnSVIDs, BSTR* psMins, BSTR* psMaxs)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetSVInfo"), DISPID(95));
  TAutoArgs<4> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnSVIDs /*[VT_I4:1]*/;
  _args[3] = psMins /*[VT_BSTR:1]*/;
  _args[4] = psMaxs /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMGetECVInfo(long nCount, long* pnEcIds, BSTR* psNames, BSTR* psDefs, BSTR* psMins
                               , BSTR* psMaxs, BSTR* psUnits)
{
  _TDispID _dispid(*this, OLETEXT("GEMGetECVInfo"), DISPID(96));
  TAutoArgs<7> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnEcIds /*[VT_I4:1]*/;
  _args[3] = psNames /*[VT_BSTR:1]*/;
  _args[4] = psDefs /*[VT_BSTR:1]*/;
  _args[5] = psMins /*[VT_BSTR:1]*/;
  _args[6] = psMaxs /*[VT_BSTR:1]*/;
  _args[7] = psUnits /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspOffline(long nMsgId, long nAck)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspOffline"), DISPID(97));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nAck /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspOnline(long nMsgId, long nAck)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspOnline"), DISPID(98));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nAck /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqHostOffline()
{
  _TDispID _dispid(*this, OLETEXT("GEMReqHostOffline"), DISPID(99));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqStartPolling(BSTR sName, long nScanTime)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqStartPolling"), DISPID(100));
  TAutoArgs<2> _args;
  _args[1] = sName /*[VT_BSTR:0]*/;
  _args[2] = nScanTime /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqStopPolling(BSTR sName)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqStopPolling"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = sName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspRemoteCommand2(long nMsgId, BSTR sCmd, long nHCAck, long nCount, 
                                      BSTR* psCpName, long* pnCpAck)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspRemoteCommand2"), DISPID(102));
  TAutoArgs<6> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sCmd /*[VT_BSTR:0]*/;
  _args[3] = nHCAck /*[VT_I4:0]*/;
  _args[4] = nCount /*[VT_I4:0]*/;
  _args[5] = psCpName /*[VT_BSTR:1]*/;
  _args[6] = pnCpAck /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMReqPPFmtSend2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode
                                  , long* pnParamCount, BSTR* psParamNames, BSTR* psParamValues)
{
  _TDispID _dispid(*this, OLETEXT("GEMReqPPFmtSend2"), DISPID(103));
  TAutoArgs<8> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sMdln /*[VT_BSTR:0]*/;
  _args[3] = sSoftRev /*[VT_BSTR:0]*/;
  _args[4] = nCount /*[VT_I4:0]*/;
  _args[5] = psCCode /*[VT_BSTR:1]*/;
  _args[6] = pnParamCount /*[VT_I4:1]*/;
  _args[7] = psParamNames /*[VT_BSTR:1]*/;
  _args[8] = psParamValues /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DeXGemDispT<T>::GEMRspPPFmt2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                              BSTR* psCCode, long* pnParamCount, BSTR* psParamNames, 
                              BSTR* psParamValues)
{
  _TDispID _dispid(*this, OLETEXT("GEMRspPPFmt2"), DISPID(104));
  TAutoArgs<9> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sMdln /*[VT_BSTR:0]*/;
  _args[4] = sSoftRev /*[VT_BSTR:0]*/;
  _args[5] = nCount /*[VT_I4:0]*/;
  _args[6] = psCCode /*[VT_BSTR:1]*/;
  _args[7] = pnParamCount /*[VT_I4:1]*/;
  _args[8] = psParamNames /*[VT_BSTR:1]*/;
  _args[9] = psParamValues /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DeXGemEvents
// Flags:     (4096) Dispatchable
// GUID:      {F0B2A415-B60D-4F3D-BDA6-D82551C59CFA}
// *********************************************************************//
template <class T> void __fastcall
_DeXGemEventsDispT<T>::eSECSMessageReceived(long nObjectID, long nStream, long nFunction, 
                                            long nSysbyte)
{
  _TDispID _dispid(/* eSECSMessageReceived */ DISPID(1));
  TAutoArgs<4> _args;
  _args[1] = nObjectID /*[VT_I4:0]*/;
  _args[2] = nStream /*[VT_I4:0]*/;
  _args[3] = nFunction /*[VT_I4:0]*/;
  _args[4] = nSysbyte /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMCommStateChanged(long nState)
{
  _TDispID _dispid(/* eGEMCommStateChanged */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = nState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMControlStateChanged(long nState)
{
  _TDispID _dispid(/* eGEMControlStateChanged */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = nState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqChangeECV(long nMsgId, long nCount, long* pnEcIds, BSTR* psVals)
{
  _TDispID _dispid(/* eGEMReqChangeECV */ DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nCount /*[VT_I4:0]*/;
  _args[3] = pnEcIds /*[VT_I4:1]*/;
  _args[4] = psVals /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMECVChanged(long nCount, long* pnEcIds, BSTR* psVals)
{
  _TDispID _dispid(/* eGEMECVChanged */ DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnEcIds /*[VT_I4:1]*/;
  _args[3] = psVals /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqGetDateTime(long nMsgId)
{
  _TDispID _dispid(/* eGEMReqGetDateTime */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspGetDateTime(BSTR sSystemTime)
{
  _TDispID _dispid(/* eGEMRspGetDateTime */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = sSystemTime /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqDateTime(long nMsgId, BSTR sSystemTime)
{
  _TDispID _dispid(/* eGEMReqDateTime */ DISPID(8));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sSystemTime /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMErrorEvent(long nErrorCode)
{
  _TDispID _dispid(/* eGEMErrorEvent */ DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = nErrorCode /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqRemoteCommand(long nMsgId, BSTR sRcmd, long nCount, BSTR* psNames, 
                                            BSTR* psVals)
{
  _TDispID _dispid(/* eGEMReqRemoteCommand */ DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sRcmd /*[VT_BSTR:0]*/;
  _args[3] = nCount /*[VT_I4:0]*/;
  _args[4] = psNames /*[VT_BSTR:1]*/;
  _args[5] = psVals /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPLoadInquire(long nMsgId, BSTR sPpid, long nLength)
{
  _TDispID _dispid(/* eGEMReqPPLoadInquire */ DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = nLength /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPLoadInquire(BSTR sPpid, long nResult)
{
  _TDispID _dispid(/* eGEMRspPPLoadInquire */ DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = nResult /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPSend(long nMsgId, BSTR sPpid, BSTR sBody)
{
  _TDispID _dispid(/* eGEMReqPPSend */ DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sBody /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPSend(BSTR sPpid, long nResult)
{
  _TDispID _dispid(/* eGEMRspPPSend */ DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = nResult /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPP(long nMsgId, BSTR sPpid)
{
  _TDispID _dispid(/* eGEMReqPP */ DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPP(BSTR sPpid, BSTR sBody)
{
  _TDispID _dispid(/* eGEMRspPP */ DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sBody /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPDelete(long nMsgId, long nCount, BSTR* psPpid)
{
  _TDispID _dispid(/* eGEMReqPPDelete */ DISPID(17));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nCount /*[VT_I4:0]*/;
  _args[3] = psPpid /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPList(long nMsgId)
{
  _TDispID _dispid(/* eGEMReqPPList */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPFmtSend(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                        long nCount, BSTR* psCCode, long* pnParamCount, 
                                        BSTR* psParamNames)
{
  _TDispID _dispid(/* eGEMReqPPFmtSend */ DISPID(19));
  TAutoArgs<8> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sMdln /*[VT_BSTR:0]*/;
  _args[4] = sSoftRev /*[VT_BSTR:0]*/;
  _args[5] = nCount /*[VT_I4:0]*/;
  _args[6] = psCCode /*[VT_BSTR:1]*/;
  _args[7] = pnParamCount /*[VT_I4:1]*/;
  _args[8] = psParamNames /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPFmtSend(BSTR sPpid, long nResult)
{
  _TDispID _dispid(/* eGEMRspPPFmtSend */ DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = nResult /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPFmt(long nMsgId, BSTR sPpid)
{
  _TDispID _dispid(/* eGEMReqPPFmt */ DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPFmt(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                    BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
{
  _TDispID _dispid(/* eGEMRspPPFmt */ DISPID(22));
  TAutoArgs<7> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sMdln /*[VT_BSTR:0]*/;
  _args[3] = sSoftRev /*[VT_BSTR:0]*/;
  _args[4] = nCount /*[VT_I4:0]*/;
  _args[5] = psCCode /*[VT_BSTR:1]*/;
  _args[6] = pnParamCount /*[VT_I4:1]*/;
  _args[7] = psParamNames /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPFmtVerification(BSTR sPpid, long nResult)
{
  _TDispID _dispid(/* eGEMRspPPFmtVerification */ DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = nResult /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMTerminalMessage(long nTid, BSTR sMsg)
{
  _TDispID _dispid(/* eGEMTerminalMessage */ DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = nTid /*[VT_I4:0]*/;
  _args[2] = sMsg /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMTerminalMultiMessage(long nTid, long nCount, BSTR* psMsg)
{
  _TDispID _dispid(/* eGEMTerminalMultiMessage */ DISPID(25));
  TAutoArgs<3> _args;
  _args[1] = nTid /*[VT_I4:0]*/;
  _args[2] = nCount /*[VT_I4:0]*/;
  _args[3] = psMsg /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMSpoolStateChanged(long nState, long nLoadState, long nUnloadState, 
                                             BSTR sFullTime, long nMaxTransmit, long nMsgNum, 
                                             long nTotalNum, long nTransmitFail)
{
  _TDispID _dispid(/* eGEMSpoolStateChanged */ DISPID(26));
  TAutoArgs<8> _args;
  _args[1] = nState /*[VT_I4:0]*/;
  _args[2] = nLoadState /*[VT_I4:0]*/;
  _args[3] = nUnloadState /*[VT_I4:0]*/;
  _args[4] = sFullTime /*[VT_BSTR:0]*/;
  _args[5] = nMaxTransmit /*[VT_I4:0]*/;
  _args[6] = nMsgNum /*[VT_I4:0]*/;
  _args[7] = nTotalNum /*[VT_I4:0]*/;
  _args[8] = nTransmitFail /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eXGEMStateEvent(long nState)
{
  _TDispID _dispid(/* eXGEMStateEvent */ DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = nState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspAllECInfo(long lCount, long* plVid, BSTR* psName, BSTR* psValue, 
                                        BSTR* psDefault, BSTR* psMin, BSTR* psMax, BSTR* psUnit)
{
  _TDispID _dispid(/* eGEMRspAllECInfo */ DISPID(28));
  TAutoArgs<8> _args;
  _args[1] = lCount /*[VT_I4:0]*/;
  _args[2] = plVid /*[VT_I4:1]*/;
  _args[3] = psName /*[VT_BSTR:1]*/;
  _args[4] = psValue /*[VT_BSTR:1]*/;
  _args[5] = psDefault /*[VT_BSTR:1]*/;
  _args[6] = psMin /*[VT_BSTR:1]*/;
  _args[7] = psMax /*[VT_BSTR:1]*/;
  _args[8] = psUnit /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
{
  _TDispID _dispid(/* eGEMReqPPSendEx */ DISPID(29));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sRecipePath /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPEx(BSTR sPpid, BSTR sRecipePath)
{
  _TDispID _dispid(/* eGEMRspPPEx */ DISPID(30));
  TAutoArgs<2> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sRecipePath /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
{
  _TDispID _dispid(/* eGEMReqPPEx */ DISPID(31));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sRecipePath /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPSendEx(BSTR sPpid, BSTR sRecipePath, long nResult)
{
  _TDispID _dispid(/* eGEMRspPPSendEx */ DISPID(32));
  TAutoArgs<3> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sRecipePath /*[VT_BSTR:0]*/;
  _args[3] = nResult /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReportedEvent(long nEventID)
{
  _TDispID _dispid(/* eGEMReportedEvent */ DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = nEventID /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspLoopback(long nCount, long* pnAbs)
{
  _TDispID _dispid(/* eGEMRspLoopback */ DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = nCount /*[VT_I4:0]*/;
  _args[2] = pnAbs /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqOffline(long nMsgId, long nFromState, long nToState)
{
  _TDispID _dispid(/* eGEMReqOffline */ DISPID(35));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nFromState /*[VT_I4:0]*/;
  _args[3] = nToState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqOnline(long nMsgId, long nFromState, long nToState)
{
  _TDispID _dispid(/* eGEMReqOnline */ DISPID(36));
  TAutoArgs<3> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = nFromState /*[VT_I4:0]*/;
  _args[3] = nToState /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMNotifyPerformanceWarning(long nLevel)
{
  _TDispID _dispid(/* eGEMNotifyPerformanceWarning */ DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = nLevel /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMSecondaryMsgReceived(long nS, long nF, long nSysbyte, BSTR sParam1, 
                                                BSTR sParam2, BSTR sParam3)
{
  _TDispID _dispid(/* eGEMSecondaryMsgReceived */ DISPID(38));
  TAutoArgs<6> _args;
  _args[1] = nS /*[VT_I4:0]*/;
  _args[2] = nF /*[VT_I4:0]*/;
  _args[3] = nSysbyte /*[VT_I4:0]*/;
  _args[4] = sParam1 /*[VT_BSTR:0]*/;
  _args[5] = sParam2 /*[VT_BSTR:0]*/;
  _args[6] = sParam3 /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReqPPFmtSend2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                         long nCount, BSTR* psCCoode, long* pnParamCount, 
                                         BSTR* psParamNames, BSTR* psParamValues)
{
  _TDispID _dispid(/* eGEMReqPPFmtSend2 */ DISPID(39));
  TAutoArgs<9> _args;
  _args[1] = nMsgId /*[VT_I4:0]*/;
  _args[2] = sPpid /*[VT_BSTR:0]*/;
  _args[3] = sMdln /*[VT_BSTR:0]*/;
  _args[4] = sSoftRev /*[VT_BSTR:0]*/;
  _args[5] = nCount /*[VT_I4:0]*/;
  _args[6] = psCCoode /*[VT_BSTR:1]*/;
  _args[7] = pnParamCount /*[VT_I4:1]*/;
  _args[8] = psParamNames /*[VT_BSTR:1]*/;
  _args[9] = psParamValues /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMRspPPFmt2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                     BSTR* psCCode, long* pnParamCount, BSTR* psParamNames, 
                                     BSTR* psParamValues)
{
  _TDispID _dispid(/* eGEMRspPPFmt2 */ DISPID(40));
  TAutoArgs<8> _args;
  _args[1] = sPpid /*[VT_BSTR:0]*/;
  _args[2] = sMdln /*[VT_BSTR:0]*/;
  _args[3] = sSoftRev /*[VT_BSTR:0]*/;
  _args[4] = nCount /*[VT_I4:0]*/;
  _args[5] = psCCode /*[VT_BSTR:1]*/;
  _args[6] = pnParamCount /*[VT_I4:1]*/;
  _args[7] = psParamNames /*[VT_BSTR:1]*/;
  _args[8] = psParamValues /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DeXGemEventsDispT<T>::eGEMReportedEvent2(long nEventID, long nSysbyte)
{
  _TDispID _dispid(/* eGEMReportedEvent2 */ DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = nEventID /*[VT_I4:0]*/;
  _args[2] = nSysbyte /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : eXGem
// Event Interface : _DeXGemEvents
// *********************************************************************//
template <class T>
class TEvents_eXGem : public IConnectionPointImpl<T,
                                                 &DIID__DeXGemEvents,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_eSECSMessageReceived(long nObjectID, long nStream, long nFunction, 
                                            long nSysbyte);
  void            Fire_eGEMCommStateChanged(long nState);
  void            Fire_eGEMControlStateChanged(long nState);
  void            Fire_eGEMReqChangeECV(long nMsgId, long nCount, long* pnEcIds, BSTR* psVals);
  void            Fire_eGEMECVChanged(long nCount, long* pnEcIds, BSTR* psVals);
  void            Fire_eGEMReqGetDateTime(long nMsgId);
  void            Fire_eGEMRspGetDateTime(BSTR sSystemTime);
  void            Fire_eGEMReqDateTime(long nMsgId, BSTR sSystemTime);
  void            Fire_eGEMErrorEvent(long nErrorCode);
  void            Fire_eGEMReqRemoteCommand(long nMsgId, BSTR sRcmd, long nCount, BSTR* psNames, 
                                            BSTR* psVals);
  void            Fire_eGEMReqPPLoadInquire(long nMsgId, BSTR sPpid, long nLength);
  void            Fire_eGEMRspPPLoadInquire(BSTR sPpid, long nResult);
  void            Fire_eGEMReqPPSend(long nMsgId, BSTR sPpid, BSTR sBody);
  void            Fire_eGEMRspPPSend(BSTR sPpid, long nResult);
  void            Fire_eGEMReqPP(long nMsgId, BSTR sPpid);
  void            Fire_eGEMRspPP(BSTR sPpid, BSTR sBody);
  void            Fire_eGEMReqPPDelete(long nMsgId, long nCount, BSTR* psPpid);
  void            Fire_eGEMReqPPList(long nMsgId);
  void            Fire_eGEMReqPPFmtSend(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                        long nCount, BSTR* psCCode, long* pnParamCount, 
                                        BSTR* psParamNames);
  void            Fire_eGEMRspPPFmtSend(BSTR sPpid, long nResult);
  void            Fire_eGEMReqPPFmt(long nMsgId, BSTR sPpid);
  void            Fire_eGEMRspPPFmt(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                    BSTR* psCCode, long* pnParamCount, BSTR* psParamNames);
  void            Fire_eGEMRspPPFmtVerification(BSTR sPpid, long nResult);
  void            Fire_eGEMTerminalMessage(long nTid, BSTR sMsg);
  void            Fire_eGEMTerminalMultiMessage(long nTid, long nCount, BSTR* psMsg);
  void            Fire_eGEMSpoolStateChanged(long nState, long nLoadState, long nUnloadState, 
                                             BSTR sFullTime, long nMaxTransmit, long nMsgNum, 
                                             long nTotalNum, long nTransmitFail);
  void            Fire_eXGEMStateEvent(long nState);
  void            Fire_eGEMRspAllECInfo(long lCount, long* plVid, BSTR* psName, BSTR* psValue, 
                                        BSTR* psDefault, BSTR* psMin, BSTR* psMax, BSTR* psUnit);
  void            Fire_eGEMReqPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath);
  void            Fire_eGEMRspPPEx(BSTR sPpid, BSTR sRecipePath);
  void            Fire_eGEMReqPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath);
  void            Fire_eGEMRspPPSendEx(BSTR sPpid, BSTR sRecipePath, long nResult);
  void            Fire_eGEMReportedEvent(long nEventID);
  void            Fire_eGEMRspLoopback(long nCount, long* pnAbs);
  void            Fire_eGEMReqOffline(long nMsgId, long nFromState, long nToState);
  void            Fire_eGEMReqOnline(long nMsgId, long nFromState, long nToState);
  void            Fire_eGEMNotifyPerformanceWarning(long nLevel);
  void            Fire_eGEMSecondaryMsgReceived(long nS, long nF, long nSysbyte, BSTR sParam1, 
                                                BSTR sParam2, BSTR sParam3);
  void            Fire_eGEMReqPPFmtSend2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                         long nCount, BSTR* psCCoode, long* pnParamCount, 
                                         BSTR* psParamNames, BSTR* psParamValues);
  void            Fire_eGEMRspPPFmt2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                     BSTR* psCCode, long* pnParamCount, BSTR* psParamNames, 
                                     BSTR* psParamValues);
  void            Fire_eGEMReportedEvent2(long nEventID, long nSysbyte);
protected:
  _DeXGemEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_eXGem<T>::Fire_eSECSMessageReceived(long nObjectID, long nStream, long nFunction, 
                                            long nSysbyte)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eSECSMessageReceived(nObjectID, nStream, nFunction, nSysbyte);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMCommStateChanged(long nState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMCommStateChanged(nState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMControlStateChanged(long nState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMControlStateChanged(nState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqChangeECV(long nMsgId, long nCount, long* pnEcIds, BSTR* psVals)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqChangeECV(nMsgId, nCount, pnEcIds, psVals);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMECVChanged(long nCount, long* pnEcIds, BSTR* psVals)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMECVChanged(nCount, pnEcIds, psVals);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqGetDateTime(long nMsgId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqGetDateTime(nMsgId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspGetDateTime(BSTR sSystemTime)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspGetDateTime(sSystemTime);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqDateTime(long nMsgId, BSTR sSystemTime)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqDateTime(nMsgId, sSystemTime);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMErrorEvent(long nErrorCode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMErrorEvent(nErrorCode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqRemoteCommand(long nMsgId, BSTR sRcmd, long nCount, BSTR* psNames, 
                                            BSTR* psVals)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqRemoteCommand(nMsgId, sRcmd, nCount, psNames, psVals);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPLoadInquire(long nMsgId, BSTR sPpid, long nLength)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPLoadInquire(nMsgId, sPpid, nLength);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPLoadInquire(BSTR sPpid, long nResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPLoadInquire(sPpid, nResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPSend(long nMsgId, BSTR sPpid, BSTR sBody)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPSend(nMsgId, sPpid, sBody);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPSend(BSTR sPpid, long nResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPSend(sPpid, nResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPP(long nMsgId, BSTR sPpid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPP(nMsgId, sPpid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPP(BSTR sPpid, BSTR sBody)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPP(sPpid, sBody);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPDelete(long nMsgId, long nCount, BSTR* psPpid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPDelete(nMsgId, nCount, psPpid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPList(long nMsgId)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPList(nMsgId);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPFmtSend(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                        long nCount, BSTR* psCCode, long* pnParamCount, 
                                        BSTR* psParamNames)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPFmtSend(nMsgId, sPpid, sMdln, sSoftRev, nCount, psCCode, pnParamCount, 
                                      psParamNames);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPFmtSend(BSTR sPpid, long nResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPFmtSend(sPpid, nResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPFmt(long nMsgId, BSTR sPpid)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPFmt(nMsgId, sPpid);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPFmt(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                    BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPFmt(sPpid, sMdln, sSoftRev, nCount, psCCode, pnParamCount, 
                                  psParamNames);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPFmtVerification(BSTR sPpid, long nResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPFmtVerification(sPpid, nResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMTerminalMessage(long nTid, BSTR sMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMTerminalMessage(nTid, sMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMTerminalMultiMessage(long nTid, long nCount, BSTR* psMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMTerminalMultiMessage(nTid, nCount, psMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMSpoolStateChanged(long nState, long nLoadState, long nUnloadState, 
                                             BSTR sFullTime, long nMaxTransmit, long nMsgNum, 
                                             long nTotalNum, long nTransmitFail)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMSpoolStateChanged(nState, nLoadState, nUnloadState, sFullTime, nMaxTransmit, 
                                           nMsgNum, nTotalNum, nTransmitFail);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eXGEMStateEvent(long nState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eXGEMStateEvent(nState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspAllECInfo(long lCount, long* plVid, BSTR* psName, BSTR* psValue, 
                                        BSTR* psDefault, BSTR* psMin, BSTR* psMax, BSTR* psUnit)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspAllECInfo(lCount, plVid, psName, psValue, psDefault, psMin, psMax, 
                                      psUnit);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPSendEx(nMsgId, sPpid, sRecipePath);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPEx(BSTR sPpid, BSTR sRecipePath)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPEx(sPpid, sRecipePath);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPEx(nMsgId, sPpid, sRecipePath);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPSendEx(BSTR sPpid, BSTR sRecipePath, long nResult)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPSendEx(sPpid, sRecipePath, nResult);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReportedEvent(long nEventID)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReportedEvent(nEventID);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspLoopback(long nCount, long* pnAbs)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspLoopback(nCount, pnAbs);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqOffline(long nMsgId, long nFromState, long nToState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqOffline(nMsgId, nFromState, nToState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqOnline(long nMsgId, long nFromState, long nToState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqOnline(nMsgId, nFromState, nToState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMNotifyPerformanceWarning(long nLevel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMNotifyPerformanceWarning(nLevel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMSecondaryMsgReceived(long nS, long nF, long nSysbyte, BSTR sParam1, 
                                                BSTR sParam2, BSTR sParam3)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMSecondaryMsgReceived(nS, nF, nSysbyte, sParam1, sParam2, sParam3);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReqPPFmtSend2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, 
                                         long nCount, BSTR* psCCoode, long* pnParamCount, 
                                         BSTR* psParamNames, BSTR* psParamValues)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReqPPFmtSend2(nMsgId, sPpid, sMdln, sSoftRev, nCount, psCCoode, 
                                       pnParamCount, psParamNames, psParamValues);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMRspPPFmt2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                                     BSTR* psCCode, long* pnParamCount, BSTR* psParamNames, 
                                     BSTR* psParamValues)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMRspPPFmt2(sPpid, sMdln, sSoftRev, nCount, psCCode, pnParamCount, 
                                   psParamNames, psParamValues);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_eXGem<T>::Fire_eGEMReportedEvent2(long nEventID, long nSysbyte)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.eGEMReportedEvent2(nEventID, nSysbyte);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : eXGem
// Event Interface : _DeXGemEvents
// *********************************************************************//
template <typename T>
class IeXGem_EventsDispatcher : public IUnknown
{
public:
  void Fire_eSECSMessageReceived(long nObjectID, long nStream, long nFunction, long nSysbyte)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eSECSMessageReceived(nObjectID, nStream, nFunction, nSysbyte);
  }

  void Fire_eGEMCommStateChanged(long nState)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMCommStateChanged(nState);
  }

  void Fire_eGEMControlStateChanged(long nState)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMControlStateChanged(nState);
  }

  void Fire_eGEMReqChangeECV(long nMsgId, long nCount, long* pnEcIds, BSTR* psVals)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqChangeECV(nMsgId, nCount, pnEcIds, psVals);
  }

  void Fire_eGEMECVChanged(long nCount, long* pnEcIds, BSTR* psVals)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMECVChanged(nCount, pnEcIds, psVals);
  }

  void Fire_eGEMReqGetDateTime(long nMsgId)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqGetDateTime(nMsgId);
  }

  void Fire_eGEMRspGetDateTime(BSTR sSystemTime)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspGetDateTime(sSystemTime);
  }

  void Fire_eGEMReqDateTime(long nMsgId, BSTR sSystemTime)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqDateTime(nMsgId, sSystemTime);
  }

  void Fire_eGEMErrorEvent(long nErrorCode)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMErrorEvent(nErrorCode);
  }

  void Fire_eGEMReqRemoteCommand(long nMsgId, BSTR sRcmd, long nCount, BSTR* psNames, BSTR* psVals)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqRemoteCommand(nMsgId, sRcmd, nCount, psNames, psVals);
  }

  void Fire_eGEMReqPPLoadInquire(long nMsgId, BSTR sPpid, long nLength)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPLoadInquire(nMsgId, sPpid, nLength);
  }

  void Fire_eGEMRspPPLoadInquire(BSTR sPpid, long nResult)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPLoadInquire(sPpid, nResult);
  }

  void Fire_eGEMReqPPSend(long nMsgId, BSTR sPpid, BSTR sBody)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPSend(nMsgId, sPpid, sBody);
  }

  void Fire_eGEMRspPPSend(BSTR sPpid, long nResult)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPSend(sPpid, nResult);
  }

  void Fire_eGEMReqPP(long nMsgId, BSTR sPpid)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPP(nMsgId, sPpid);
  }

  void Fire_eGEMRspPP(BSTR sPpid, BSTR sBody)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPP(sPpid, sBody);
  }

  void Fire_eGEMReqPPDelete(long nMsgId, long nCount, BSTR* psPpid)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPDelete(nMsgId, nCount, psPpid);
  }

  void Fire_eGEMReqPPList(long nMsgId)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPList(nMsgId);
  }

  void Fire_eGEMReqPPFmtSend(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                             BSTR* psCCode, long* pnParamCount, BSTR* psParamNames)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPFmtSend(nMsgId, sPpid, sMdln, sSoftRev, nCount, psCCode, pnParamCount, 
                                   psParamNames);
  }

  void Fire_eGEMRspPPFmtSend(BSTR sPpid, long nResult)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPFmtSend(sPpid, nResult);
  }

  void Fire_eGEMReqPPFmt(long nMsgId, BSTR sPpid)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPFmt(nMsgId, sPpid);
  }

  void Fire_eGEMRspPPFmt(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode, 
                         long* pnParamCount, BSTR* psParamNames)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPFmt(sPpid, sMdln, sSoftRev, nCount, psCCode, pnParamCount, psParamNames);
  }

  void Fire_eGEMRspPPFmtVerification(BSTR sPpid, long nResult)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPFmtVerification(sPpid, nResult);
  }

  void Fire_eGEMTerminalMessage(long nTid, BSTR sMsg)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMTerminalMessage(nTid, sMsg);
  }

  void Fire_eGEMTerminalMultiMessage(long nTid, long nCount, BSTR* psMsg)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMTerminalMultiMessage(nTid, nCount, psMsg);
  }

  void Fire_eGEMSpoolStateChanged(long nState, long nLoadState, long nUnloadState, BSTR sFullTime, 
                                  long nMaxTransmit, long nMsgNum, long nTotalNum, 
                                  long nTransmitFail)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMSpoolStateChanged(nState, nLoadState, nUnloadState, sFullTime, nMaxTransmit, 
                                        nMsgNum, nTotalNum, nTransmitFail);
  }

  void Fire_eXGEMStateEvent(long nState)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eXGEMStateEvent(nState);
  }

  void Fire_eGEMRspAllECInfo(long lCount, long* plVid, BSTR* psName, BSTR* psValue, BSTR* psDefault, 
                             BSTR* psMin, BSTR* psMax, BSTR* psUnit)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspAllECInfo(lCount, plVid, psName, psValue, psDefault, psMin, psMax, psUnit);
  }

  void Fire_eGEMReqPPSendEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPSendEx(nMsgId, sPpid, sRecipePath);
  }

  void Fire_eGEMRspPPEx(BSTR sPpid, BSTR sRecipePath)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPEx(sPpid, sRecipePath);
  }

  void Fire_eGEMReqPPEx(long nMsgId, BSTR sPpid, BSTR sRecipePath)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPEx(nMsgId, sPpid, sRecipePath);
  }

  void Fire_eGEMRspPPSendEx(BSTR sPpid, BSTR sRecipePath, long nResult)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPSendEx(sPpid, sRecipePath, nResult);
  }

  void Fire_eGEMReportedEvent(long nEventID)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReportedEvent(nEventID);
  }

  void Fire_eGEMRspLoopback(long nCount, long* pnAbs)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspLoopback(nCount, pnAbs);
  }

  void Fire_eGEMReqOffline(long nMsgId, long nFromState, long nToState)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqOffline(nMsgId, nFromState, nToState);
  }

  void Fire_eGEMReqOnline(long nMsgId, long nFromState, long nToState)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqOnline(nMsgId, nFromState, nToState);
  }

  void Fire_eGEMNotifyPerformanceWarning(long nLevel)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMNotifyPerformanceWarning(nLevel);
  }

  void Fire_eGEMSecondaryMsgReceived(long nS, long nF, long nSysbyte, BSTR sParam1, BSTR sParam2, 
                                     BSTR sParam3)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMSecondaryMsgReceived(nS, nF, nSysbyte, sParam1, sParam2, sParam3);
  }

  void Fire_eGEMReqPPFmtSend2(long nMsgId, BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, 
                              BSTR* psCCoode, long* pnParamCount, BSTR* psParamNames, 
                              BSTR* psParamValues)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReqPPFmtSend2(nMsgId, sPpid, sMdln, sSoftRev, nCount, psCCoode, pnParamCount, 
                                    psParamNames, psParamValues);
  }

  void Fire_eGEMRspPPFmt2(BSTR sPpid, BSTR sMdln, BSTR sSoftRev, long nCount, BSTR* psCCode, 
                          long* pnParamCount, BSTR* psParamNames, BSTR* psParamValues)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMRspPPFmt2(sPpid, sMdln, sSoftRev, nCount, psCCode, pnParamCount, psParamNames, 
                                psParamValues);
  }

  void Fire_eGEMReportedEvent2(long nEventID, long nSysbyte)
  {
    _DeXGemEventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.eGEMReportedEvent2(nEventID, nSysbyte);
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Exgemlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Exgemlib_tlb;
#endif

#pragma option pop

#endif // eXGemLib_TLBH
